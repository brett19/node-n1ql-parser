/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var n1ql = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"input":3,"stmt":4,"EXPLAIN":5,"select_stmt":6,"create_index_stmt":7,"drop_index_stmt":8,"create_primary_index_stmt":9,"create_secondary_index_stmt":10,"CREATE":11,"PRIMARY":12,"INDEX":13,"ON":14,"IDENTIFIER":15,"COLON":16,"DOT":17,"USING":18,"view_using":19,"LPAREN":20,"expression_list":21,"RPAREN":22,"VIEW":23,"DROP":24,"select_compound":25,"select_core":26,"select_order":27,"select_limit_offset":28,"select_select":29,"select_from":30,"select_where":31,"select_group_having":32,"select_from_required":33,"GROUP":34,"BY":35,"having":36,"HAVING":37,"expression":38,"select_select_head":39,"select_select_qualifier":40,"select_select_tail":41,"SELECT":42,"ALL":43,"DISTINCT":44,"UNIQUE":45,"result_list":46,"result_single":47,"COMMA":48,"dotted_path_star":49,"AS":50,"MULT":51,"expr":52,"FROM":53,"data_source_unnest":54,"data_source":55,"unnest_source":56,"UNNEST":57,"path":58,"join_type":59,"key_expr":60,"JOIN":61,"join_key_expr":62,"NEST":63,"KEY":64,"KEYS":65,"INNER":66,"LEFT":67,"OUTER":68,"WHERE":69,"ORDER":70,"sorting_list":71,"sorting_single":72,"ASC":73,"DESC":74,"select_limit":75,"select_offset":76,"LIMIT":77,"INT":78,"OFFSET":79,"BETWEEN":80,"AND":81,"NOT":82,"IN":83,"subquery_expr":84,"LBRACE":85,"RBRACE":86,"PLUS":87,"MINUS":88,"DIV":89,"MOD":90,"CONCAT":91,"OR":92,"EQ":93,"LT":94,"LTE":95,"GT":96,"GTE":97,"NE":98,"LIKE":99,"LBRACKET":100,"RBRACKET":101,"IS":102,"NULL":103,"MISSING":104,"VALUED":105,"prefix_expr":106,"suffix_expr":107,"atom":108,"literal_value":109,"CASE":110,"WHEN":111,"then_list":112,"else_expr":113,"END":114,"ANY":115,"SATISFIES":116,"EVERY":117,"FIRST":118,"FOR":119,"ARRAY":120,"function_arg_list":121,"THEN":122,"ELSE":123,"function_arg_single":124,"fun_dotted_path_star":125,"STRING":126,"number":127,"object":128,"array":129,"TRUE":130,"FALSE":131,"NUMBER":132,"named_expression_list":133,"named_expression_single":134,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EXPLAIN",11:"CREATE",12:"PRIMARY",13:"INDEX",14:"ON",15:"IDENTIFIER",16:"COLON",17:"DOT",18:"USING",20:"LPAREN",22:"RPAREN",23:"VIEW",24:"DROP",34:"GROUP",35:"BY",37:"HAVING",42:"SELECT",43:"ALL",44:"DISTINCT",45:"UNIQUE",48:"COMMA",50:"AS",51:"MULT",53:"FROM",57:"UNNEST",61:"JOIN",63:"NEST",64:"KEY",65:"KEYS",66:"INNER",67:"LEFT",68:"OUTER",69:"WHERE",70:"ORDER",73:"ASC",74:"DESC",77:"LIMIT",78:"INT",79:"OFFSET",80:"BETWEEN",81:"AND",82:"NOT",83:"IN",85:"LBRACE",86:"RBRACE",87:"PLUS",88:"MINUS",89:"DIV",90:"MOD",91:"CONCAT",92:"OR",93:"EQ",94:"LT",95:"LTE",96:"GT",97:"GTE",98:"NE",99:"LIKE",100:"LBRACKET",101:"RBRACKET",102:"IS",103:"NULL",104:"MISSING",105:"VALUED",110:"CASE",111:"WHEN",114:"END",115:"ANY",116:"SATISFIES",117:"EVERY",118:"FIRST",119:"FOR",120:"ARRAY",122:"THEN",123:"ELSE",126:"STRING",130:"TRUE",131:"FALSE",132:"NUMBER"},
productions_: [0,[3,1],[3,2],[4,1],[4,1],[4,1],[7,1],[7,1],[9,5],[9,8],[9,7],[9,10],[10,8],[10,11],[10,10],[10,13],[19,1],[19,1],[8,5],[8,8],[6,1],[25,3],[26,4],[26,4],[32,0],[32,4],[36,0],[36,2],[29,3],[39,1],[40,0],[40,1],[40,1],[40,1],[41,1],[46,1],[46,3],[47,1],[47,1],[47,3],[47,2],[49,1],[49,3],[30,0],[30,2],[30,5],[33,2],[33,5],[54,1],[54,2],[56,2],[56,4],[56,3],[56,3],[56,5],[56,4],[56,3],[56,5],[56,4],[56,4],[56,6],[56,5],[56,4],[56,5],[56,6],[56,5],[56,6],[56,7],[56,3],[56,5],[56,4],[56,4],[56,6],[56,5],[56,4],[56,5],[56,5],[56,6],[56,6],[56,7],[56,3],[56,5],[56,4],[56,4],[56,6],[56,5],[56,4],[56,5],[56,5],[56,6],[56,6],[56,7],[62,2],[62,2],[59,1],[59,1],[59,2],[55,1],[55,2],[55,3],[55,2],[55,4],[55,3],[60,2],[60,2],[31,0],[31,2],[27,0],[27,3],[71,1],[71,3],[72,1],[72,2],[72,2],[28,0],[28,1],[28,2],[75,2],[76,2],[38,1],[38,5],[38,6],[38,3],[38,4],[38,1],[84,3],[84,4],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,4],[52,3],[52,4],[52,6],[52,5],[52,5],[52,3],[52,4],[52,3],[52,4],[52,3],[52,4],[52,1],[106,2],[106,2],[106,1],[107,1],[108,1],[108,1],[108,3],[108,5],[108,6],[108,5],[108,7],[108,7],[108,5],[108,9],[108,7],[108,7],[108,5],[108,9],[108,7],[108,7],[108,5],[108,3],[108,4],[108,5],[108,5],[112,3],[112,5],[113,0],[113,2],[58,1],[58,4],[58,6],[58,5],[58,5],[58,3],[121,1],[121,3],[124,1],[124,1],[125,1],[125,3],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[127,1],[127,1],[128,2],[128,3],[133,1],[133,3],[134,3],[129,2],[129,3],[21,1],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
	yy.logDebugGrammar("INPUT")

break;
case 2:
	yy.logDebugGrammar("INPUT - EXPLAIN");
	yy.pStmt.ExplainOnly = true;

break;
case 3:
	yy.logDebugGrammar("STMT - SELECT")

break;
case 4:

break;
case 5:
	yy.logDebugGrammar("STMT - DROP INDEX")

break;
case 6:
	yy.logDebugGrammar("STMT - CREATE PRIMARY INDEX")

break;
case 7:
	yy.logDebugGrammar("STMT - CREATE SECONDARY INDEX")

break;
case 8:
/*	bucket := $$[$0].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Bucket = bucket
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 9:
/*	pool := $$[$0-2].s
	bucket := $$[$0].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 10:
/*	method := parsingStack.Pop().(string)
	bucket := $$[$0-2].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Bucket = bucket
	createIndexStmt.Method = method
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 11:
/*	method := parsingStack.Pop().(string)
	bucket := $$[$0-2].s
	pool := $$[$0-4].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Method = method
	createIndexStmt.Primary = true
	parsingStatement = createIndexStmt */

break;
case 12:
/*	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-3].s
	name := $$[$0-5].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 13:
/*	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-3].s
	pool := $$[$0-5].s
	name := $$[$0-8].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 14:
/*	method := parsingStack.Pop().(string)
	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-5].s
	name := $$[$0-7].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Method = method
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 15:
/*	method := parsingStack.Pop().(string)
	on := parsingStack.Pop().(ast.ExpressionList)
	bucket := $$[$0-5].s
	pool := $$[$0-7].s
	name := $$[$0-10].s
	createIndexStmt := ast.NewCreateIndexStatement()
	createIndexStmt.On = on
	createIndexStmt.Pool = pool
	createIndexStmt.Bucket = bucket
	createIndexStmt.Name = name
	createIndexStmt.Method = method
	createIndexStmt.Primary = false
	parsingStatement = createIndexStmt */

break;
case 16:
  yy.pStack.push('view');

break;
case 17:
  yy.pStack.push($$[$0]);

break;
case 18:
/*	bucket := $$[$0-2].s
	name := $$[$0].s
	dropIndexStmt := ast.NewDropIndexStatement()
	dropIndexStmt.Bucket = bucket
	dropIndexStmt.Name = name
	parsingStatement = dropIndexStmt */

break;
case 19:
/*	bucket := $$[$0-2].s
	pool := $$[$0-4].s
	name := $$[$0].s
	dropIndexStmt := ast.NewDropIndexStatement()
	dropIndexStmt.Pool = pool
	dropIndexStmt.Bucket = bucket
	dropIndexStmt.Name = name
	parsingStatement = dropIndexStmt */

break;
case 20:
	yy.logDebugGrammar("SELECT_STMT")

break;
case 21:
	// future extensibility for comining queries with UNION, etc
	yy.logDebugGrammar("SELECT_COMPOUND")

break;
case 22:
	yy.logDebugGrammar("SELECT_CORE")

break;
case 23:
	yy.logDebugGrammar("SELECT_CORE")

break;
case 24:

break;
case 25:
  var group_by = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.GroupBy = group_by;
  } else {
    yy.logDebugGrammar("This statement does not support GROUP BY");
  }

break;
case 26:

break;
case 27:
	yy.logDebugGrammar("SELECT HAVING - EXPR")
	var having_part = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Having = having_part;
  } else {
	  yy.logDebugGrammar("This statement does not support HAVING");
	}

break;
case 28:
	yy.logDebugGrammar("SELECT_SELECT")

break;
case 29:
	yy.logDebugGrammar("SELECT_SELECT_HEAD")

break;
case 30:

break;
case 31:
/* empty */

break;
case 32:
	yy.logDebugGrammar("SELECT_SELECT_QUALIFIER DISTINCT")
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Distinct = true;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 33:
	yy.logDebugGrammar("SELECT_SELECT_QUALIFIER UNIQUE")
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Distinct = true;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 34:
	yy.logDebugGrammar("SELECT SELECT TAIL - EXPR")
	var result_expr_list = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Select = result_expr_list;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 35:
  var result_expr = yy.pStack.pop();
  yy.pStack.push(ast.newResultExpressionList(result_expr));

break;
case 36:
  var result_expr_list = yy.pStack.pop();
  var result_expr = yy.pStack.pop();
  result_expr_list.unshift(result_expr);
  yy.pStack.push(result_expr_list);

break;
case 37:
	yy.logDebugGrammar("RESULT STAR")

break;
case 38:
	yy.logDebugGrammar("RESULT EXPR")
	var expr_part = yy.pStack.pop();
	var result_expr = ast.newResultExpression(expr_part);
	yy.pStack.push(result_expr);

break;
case 39:
	yy.logDebugGrammar("RESULT EXPR AS ID")
	var expr_part = yy.pStack.pop();
	var result_expr = ast.newResultExpressionWithAlias(expr_part, $$[$0]);
	yy.pStack.push(result_expr);

break;
case 40:
	yy.logDebugGrammar("RESULT EXPR ID")
  var expr_part = yy.pStack.pop();
  var result_expr = ast.newResultExpressionWithAlias(expr_part, $$[$0]);
  yy.pStack.push(result_expr);

break;
case 41:
	yy.logDebugGrammar("STAR")
  var result_expr = ast.newStarResultExpression();
	yy.pStack.push(result_expr);

break;
case 42:
	yy.logDebugGrammar("PATH DOT STAR")
	var expr_part = yy.pStack.pop();
	var result_expr = ast.newDotStarResultExpression(expr_part);
	yy.pStack.push(result_expr);

break;
case 43:
	yy.logDebugGrammar("SELECT FROM - EMPTY")

break;
case 44:
	yy.logDebugGrammar("SELECT FROM - DATASOURCE")
	var from = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.From = from;
	} else {
	  yy.logDebugGrammar("This statement does not support FROM");
	}

break;
case 45:
	yy.logDebugGrammar("SELECT FROM - DATASOURCE WITH POOL")
	var from = yy.pStack.pop();
	from.Pool = $$[$0-2];
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.From = from;
  } else {
    yy.logDebugGrammar("This statement does not support FROM");
  }

break;
case 46:
	yy.logDebugGrammar("SELECT FROM - DATASOURCE ")
	var from = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.From = from;
  } else {
    yy.logDebugGrammar("This statement does not support FROM");
  }

break;
case 47:
	yy.logDebugGrammar("SELECT FROM - DATASOURCE WITH POOL")
	var from = yy.pStack.pop();
	from.Pool = $$[$0-2];
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.From = from;
  } else {
    yy.logDebugGrammar("This statement does not support FROM");
  }

break;
case 48:
	yy.logDebugGrammar("FROM DATASOURCE WITHOUT UNNEST")

break;
case 49:
	yy.logDebugGrammar("FROM DATASOURCE WITH UNNEST")
	var rest = yy.pStack.pop();
	var last = yy.pStack.pop();
	last.Over = rest;
	yy.pStack.push(last);

break;
case 50:
    yy.logDebugGrammar("UNNEST")
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Project: proj, As:''}));

break;
case 51:
    yy.logDebugGrammar("UNNEST AS")
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As:$$[$0]}));

break;
case 52:
    yy.logDebugGrammar("UNNEST AS")
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As:$$[$0]}));

break;
case 53:
    yy.logDebugGrammar("UNNEST nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Over: rest}));

break;
case 54:
    yy.logDebugGrammar("UNNEST AS nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Over: rest}));

break;
case 55:
    yy.logDebugGrammar("UNNEST AS nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Over: rest}));

break;
case 56:
    yy.logDebugGrammar("UNNEST")
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type}));

break;
case 57:
    yy.logDebugGrammar("UNNEST AS")
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: $$[$0]}));

break;
case 58:
    yy.logDebugGrammar("UNNEST AS")
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: $$[$0]}));

break;
case 59:
    yy.logDebugGrammar("UNNEST nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: '', Over: rest}));

break;
case 60:
    yy.logDebugGrammar("UNNEST AS nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: $$[$0-1], Over: rest}));

break;
case 61:
    yy.logDebugGrammar("UNNEST AS nested")
    var rest = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Type: Type, As: $$[$0-1], Over: rest}));

break;
case 62:
    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr}));

break;
case 63:
    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));

break;
case 64:
    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));

break;
case 65:
    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr, Over: rest}));

break;
case 66:
    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 67:
    yy.logDebugGrammar("UNNEST KEY_EXPR")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 68:
    yy.logDebugGrammar("JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Keys: key_expr}));

break;
case 69:
    yy.logDebugGrammar("JOIN AS KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Keys: key_expr}));

break;
case 70:
    yy.logDebugGrammar("JOIN AS KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Keys: key_expr}));

break;
case 71:
    yy.logDebugGrammar("JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Keys: key_expr, Over: rest}));

break;
case 72:
    yy.logDebugGrammar("JOIN AS KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Keys: key_expr, Over: rest}));

break;
case 73:
    yy.logDebugGrammar("JOIN AS KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Keys: key_expr, Over: rest}));

break;
case 74:
    yy.logDebugGrammar("TYPE JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr}));


break;
case 75:
    yy.logDebugGrammar("TYPE JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Type: Type, Keys: key_expr, Over: rest}));

break;
case 76:
    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));


break;
case 77:
    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 78:
    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Type: Type, Keys: key_expr}));

break;
case 79:
    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Type: Type, Keys: key_expr, Over: rest}));

break;
case 80:
    yy.logDebugGrammar("JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: '', Keys: key_expr}));

break;
case 81:
    yy.logDebugGrammar("JOIN AS KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: $$[$0-1], Keys: key_expr}));

break;
case 82:
    yy.logDebugGrammar("JOIN AS KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: $$[$0-1], Keys: key_expr}));

break;
case 83:
    yy.logDebugGrammar("JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: '', Keys: key_expr, Over: rest}));

break;
case 84:
    yy.logDebugGrammar("JOIN AS KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: $$[$0-2], Keys: key_expr, Over: rest}));

break;
case 85:
    yy.logDebugGrammar("JOIN AS KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: $$[$0-2], Keys: key_expr, Over: rest}));

break;
case 86:
    yy.logDebugGrammar("TYPE JOIN KEY")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, Oper: 'NEST', As: '', Type: Type, Keys: key_expr}));


break;
case 87:
    yy.logDebugGrammar("TYPE JOIN KEY NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: '', Oper: 'NEST', Type: Type, Keys: key_expr, Over: rest}));

break;
case 88:
    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Oper: 'NEST', Type: Type, Keys: key_expr}));


break;
case 89:
    yy.logDebugGrammar("TYPE JOIN KEY IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Oper: 'NEST', Type: Type, Keys: key_expr, Over: rest}));

break;
case 90:
    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER")
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1], Oper: 'NEST', Type: Type, Keys: key_expr}));

break;
case 91:
    yy.logDebugGrammar("TYPE JOIN KEY AS IDENTIFIER NESTED")
    var rest = yy.pStack.pop();
    var key_expr = yy.pStack.pop();
    var proj = yy.pStack.pop();
    var Type = yy.pStack.pop();
    yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-2], Oper: 'NEST', Type: Type, Keys: key_expr, Over: rest}));

break;
case 92:
        yy.logDebugGrammar("FROM JOIN DATASOURCE with KEY")
        var key = yy.pStack.pop();
        var key_expr = ast.newKeyExpression(key, 'KEY');
        yy.pStack.push(key_expr);

break;
case 93:
        yy.logDebugGrammar("FROM DATASOURCE with KEYS")
        var keys = yy.pStack.pop();
        var key_expr = ast.newKeyExpression(keys, 'KEYS');
        yy.pStack.push(key_expr);


break;
case 94:
    yy.logDebugGrammar("INNER")
    yy.pStack.push('INNER');

break;
case 95:
    yy.logDebugGrammar("OUTER")
    yy.pStack.push('LEFT');

break;
case 96:
    yy.logDebugGrammar("LEFT OUTER")
    yy.pStack.push('LEFT');

break;
case 97:
	yy.logDebugGrammar("FROM DATASOURCE")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj}));

break;
case 98:
    yy.logDebugGrammar("FROM KEY(S) DATASOURCE")
	  var proj = yy.pStack.pop();
	  yy.pStack.push(new ast.From({Projection: proj}));

break;
case 99:
    // fixme support over as
	yy.logDebugGrammar("FROM DATASOURCE AS ID")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0]}));

break;
case 100:
    // fixme support over as
	yy.logDebugGrammar("FROM DATASOURCE ID")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0]}));

break;
case 101:
        yy.logDebugGrammar("FROM DATASOURCE AS ID KEY(S)")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1]}));


break;
case 102:
        yy.logDebugGrammar("FROM DATASOURCE ID KEY(s)")
	var proj = yy.pStack.pop();
	yy.pStack.push(new ast.From({Projection: proj, As: $$[$0-1]}));


break;
case 103:
        yy.logDebugGrammar("FROM DATASOURCE with KEY")
  var keys = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.Keys = ast.newKeyExpression(keys, 'KEY');
  } else {
    yy.logDebugGrammar("This statement does not support KEY");
  }

break;
case 104:
        yy.logDebugGrammar("FROM DATASOURCE with KEYS")
  var keys = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.Keys = ast.newKeyExpression(keys, 'KEYS');
  } else {
    yy.logDebugGrammar("This statement does not support KEYS");
  }

break;
case 105:
	yy.logDebugGrammar("SELECT WHERE - EMPTY")

break;
case 106:
	yy.logDebugGrammar("SELECT WHERE - EXPR")
	var where_part = yy.pStack.pop();
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Where = where_part;
	} else {
	  yy.logDebugGrammar("This statement does not support WHERE");
	}

break;
case 108:


break;
case 109:


break;
case 110:


break;
case 111:
	yy.logDebugGrammar("SORT EXPR")
  var expr = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.OrderBy.push(ast.newSortExpression(expr, true));
  } else {
    yy.logDebugGrammar("This statement does not support ORDER BY");
  }

break;
case 112:
	yy.logDebugGrammar("SORT EXPR ASC")
  var expr = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.OrderBy.push(ast.newSortExpression(expr, true));
  } else {
    yy.logDebugGrammar("This statement does not support ORDER BY");
  }

break;
case 113:
	yy.logDebugGrammar("SORT EXPR DESC")
  var expr = yy.pStack.pop();
  if (yy.pStmt instanceof ast.SelectStatement) {
    yy.pStmt.OrderBy.push(ast.newSortExpression(expr, false));
  } else {
    yy.logDebugGrammar("This statement does not support ORDER BY");
  }

break;
case 114:


break;
case 115:


break;
case 116:


break;
case 117:
	yy.logDebugGrammar("LIMIT %d", $$[$0]);
	if ($$[$0] < 0) {
	  throw new Error('LIMIT cannot be negative');
	}
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Limit = $$[$0];
	} else {
	  yy.logDebugGrammar("This statement does not support LIMIT");
	}

break;
case 118:
	yy.logDebugGrammar("OFFSET %d", $$[$0])
	if ($$[$0] < 0) {
	  throw new Error('OFFSET cannot be negative');
	}
	if (yy.pStmt instanceof ast.SelectStatement) {
	  yy.pStmt.Offset = $$[$0];
	} else {
	  yy.logDebugGrammar("This statement does not support OFFSET");
	}

break;
case 119:
	yy.logDebugGrammar("EXPRESSION")

break;
case 120:
    yy.logDebugGrammar(" BETWEEN EXPRESSION")
    var high = yy.pStack.pop();
    var low = yy.pStack.pop();
    var element = yy.pStack.pop();
    var leftExpression = ast.newGreaterThanOrEqualOperator(element, low);
    var rightExpression = ast.newLessThanOrEqualOperator(element, high);
    var thisExpression = ast.newAndOperator(new ast.ExpressionList(leftExpression, rightExpression));
    yy.pStack.push(thisExpression);

break;
case 121:
    yy.logDebugGrammar(" BETWEEN EXPRESSION")
    var high = yy.pStack.pop();
    var low = yy.pStack.pop();
    var element = yy.pStack.pop();
    var leftExpression = ast.newLessThanOperator(element, low);
    var rightExpression = ast.newGreaterThanOperator(element, high);
    var thisExpression = ast.newOrOperator(new ast.ExpressionList(leftExpression, rightExpression));
    yy.pStack.push(thisExpression);

break;
case 122:
    yy.logDebugGrammar(" IN expression ")
    var right = yy.pStack.pop();
    var left = yy.pStack.pop();
    var thisExpression = ast.newInOperator(left, right);
    yy.pStack.push(thisExpression);

break;
case 123:
    yy.logDebugGrammar(" IN expression ")
    var right = yy.pStack.pop();
    var left = yy.pStack.pop();
    var thisExpression = ast.newNotInOperator(left, right);
    yy.pStack.push(thisExpression);

break;
case 124:

break;
case 125:
    yy.logDebugGrammar("sub-query EXPRESSION")


break;
case 126:
    yy.logDebugGrammar("sub-query NESTED EXPRESSION")

break;
case 127:
	yy.logDebugGrammar("EXPR - PLUS")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newPlusOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 128:
	yy.logDebugGrammar("EXPR - MINUS")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newSubtractOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 129:
	yy.logDebugGrammar("EXPR - MULT")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newMultiplyOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 130:
	yy.logDebugGrammar("EXPR - DIV")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newDivideOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 131:
	yy.logDebugGrammar("EXPR - MOD")
  var right = yy.pStack.pop();
  var left = yy.pStack.pop();
  var thisExpression = ast.newModuloOperator(left, right);
  yy.pStack.push(thisExpression);

break;
case 132:
	yy.logDebugGrammar("EXPR - CONCAT")
	// TODO: Implement This!
	/*right := parsingStack.Pop()
	left := parsingStack.Pop()
	thisExpression := ast.NewStringConcatenateOperator(left.(ast.Expression), right.(ast.Expression))
	parsingStack.Push(thisExpression)*/

break;
case 133:
	yy.logDebugGrammar("EXPR - AND")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newAndOperator(new ast.ExpressionList(left, right));
	yy.pStack.push(thisExpression);

break;
case 134:
	yy.logDebugGrammar("EXPR - OR")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newOrOperator(new ast.ExpressionList(left, right));
	yy.pStack.push(thisExpression);

break;
case 135:
	yy.logDebugGrammar("EXPR - EQ")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newEqualToOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 136:
	yy.logDebugGrammar("EXPR - LT")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newLessThanOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 137:
	yy.logDebugGrammar("EXPR - LTE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newLessThanOrEqualOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 138:
	yy.logDebugGrammar("EXPR - GT")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newGreaterThanOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 139:
	yy.logDebugGrammar("EXPR - GTE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newGreaterThanOrEqualOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 140:
	yy.logDebugGrammar("EXPR - NE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newNotEqualToOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 141:
	yy.logDebugGrammar("EXPR - LIKE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newLikeOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 142:
	yy.logDebugGrammar("EXPR - NOT LIKE")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newNotLikeOperator(left, right);
	yy.pStack.push(thisExpression);


break;
case 143:
	yy.logDebugGrammar("EXPR DOT MEMBER")
	var right = ast.newProperty($$[$0]);
	var left = yy.pStack.pop();
	var thisExpression = ast.newDotMemberOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 144:
	yy.logDebugGrammar("EXPR BRACKET MEMBER")
	var right = yy.pStack.pop();
	var left = yy.pStack.pop();
	var thisExpression = ast.newBracketMemberOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 145:
    yy.logDebugGrammar("EXPR COLON EXPR SLICE BRACKET MEMBER")
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-3].n)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 146:
    yy.logDebugGrammar("EXPR COLON SLICE BRACKET MEMBER")
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-2].n)), ast.NewLiteralNumber(float64(0)))
    parsingStack.Push(thisExpression)*/


break;
case 147:
    yy.logDebugGrammar("COLON EXPR SLICE BRACKET MEMBER")
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64(0)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 148:
	yy.logDebugGrammar("SUFFIX_EXPR IS NULL")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNullOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 149:
	yy.logDebugGrammar("SUFFIX_EXPR IS NOT NULL")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNotNullOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 150:
	yy.logDebugGrammar("SUFFIX_EXPR IS MISSING")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsMissingOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 151:
	yy.logDebugGrammar("SUFFIX_EXPR IS NOT MISSING")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNotMissingOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 152:
	yy.logDebugGrammar("SUFFIX_EXPR IS VALUED")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsValuedOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 153:
	yy.logDebugGrammar("SUFFIX_EXPR IS NOT VALUED")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newIsNotValuedOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 154:


break;
case 155:
	yy.logDebugGrammar("EXPR - NOT")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newNotOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 156:
	yy.logDebugGrammar("EXPR - CHANGE SIGN")
	var operand = yy.pStack.pop();
	var thisExpression = ast.newChangeSignOperator(operand);
	yy.pStack.push(thisExpression);

break;
case 157:


break;
case 158:
	yy.logDebugGrammar("SUFFIX_EXPR")

break;
case 159:
	yy.logDebugGrammar("IDENTIFIER - %s", $$[$0].s)
	var thisExpression = ast.newProperty($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 160:
	yy.logDebugGrammar("LITERAL")

break;
case 161:
	yy.logDebugGrammar("NESTED EXPR")

break;
case 162:
	yy.logDebugGrammar("CASE WHEN THEN ELSE END")
	throw new Error('not_yet_supported');
	/*cwtee := ast.NewCaseOperator()
	topStack := parsingStack.Pop()
	switch topStack := topStack.(type) {
	case ast.Expression:
		cwtee.Else = topStack
		// now look for whenthens
		nextStack := parsingStack.Pop().([]*ast.WhenThen)
		cwtee.WhenThens = nextStack
	case []*ast.WhenThen:
		// no else
		cwtee.WhenThens = topStack
	}
	parsingStack.Push(cwtee)*/

break;
case 163:
	yy.logDebugGrammar("CASE WHEN THEN ELSE END")
	throw new Error('not_yet_supported');
	/*cwtee := ast.NewCaseOperator()
	topStack := parsingStack.Pop()
	switch topStack := topStack.(type) {
	case ast.Expression:
		cwtee.Else = topStack
		// now look for whenthens
		nextStack := parsingStack.Pop().([]*ast.WhenThen)
		cwtee.WhenThens = nextStack
	case []*ast.WhenThen:
		// no else
		cwtee.WhenThens = topStack
	}
        cwtee.Switch = parsingStack.Pop().(ast.Expression)
	parsingStack.Push(cwtee)*/

break;
case 164:
    yy.logDebugGrammar("ANY SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAnyOperator(condition, sub, "")
    parsingStack.Push(collectionAny)*/

break;
case 165:
    yy.logDebugGrammar("ANY IN SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAnyOperator(condition, sub, $$[$0-5].s)
    parsingStack.Push(collectionAny)*/

break;
case 166:
    yy.logDebugGrammar("ANY IN SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAllOperator(condition, sub, $$[$0-5].s)
    parsingStack.Push(collectionAny)*/

break;
case 167:
    yy.logDebugGrammar("ANY SATISFIES")
    throw new Error('not_yet_supported');
    /*condition := parsingStack.Pop().(ast.Expression)
    sub := parsingStack.Pop().(ast.Expression)
    collectionAny := ast.NewCollectionAllOperator(condition, sub, "")
    parsingStack.Push(collectionAny)*/

break;
case 168:
	yy.logDebugGrammar("FIRST FOR IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(condition, sub, $$[$0-5].s, output)
	parsingStack.Push(collectionFirst)*/

break;
case 169:
	yy.logDebugGrammar("FIRST IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(condition, sub, "", output)
	parsingStack.Push(collectionFirst)*/

break;
case 170:
	yy.logDebugGrammar("FIRST FOR IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(nil, sub, $$[$0-3].s, output)
	parsingStack.Push(collectionFirst)*/

break;
case 171:
	yy.logDebugGrammar("FIRST IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionFirst := ast.NewCollectionFirstOperator(nil, sub, "", output)
	parsingStack.Push(collectionFirst)*/

break;
case 172:
	yy.logDebugGrammar("ARRAY FOR IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(condition, sub, $$[$0-5].s, output)
	parsingStack.Push(collectionArray)*/

break;
case 173:
	yy.logDebugGrammar("ARRAY IN WHEN")
	throw new Error('not_yet_supported');
	/*condition := parsingStack.Pop().(ast.Expression)
	sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(condition, sub, "", output)
	parsingStack.Push(collectionArray)*/

break;
case 174:
	yy.logDebugGrammar("ARRAY FOR IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(nil, sub, $$[$0-3].s, output)
	parsingStack.Push(collectionArray)*/

break;
case 175:
	yy.logDebugGrammar("ARRAY IN")
	throw new Error('not_yet_supported');
	/*sub := parsingStack.Pop().(ast.Expression)
	output := parsingStack.Pop().(ast.Expression)
	collectionArray := ast.NewCollectionArrayOperator(nil, sub, "", output)
	parsingStack.Push(collectionArray)*/

break;
case 176:
	yy.logDebugGrammar("FUNCTION EXPR NOPARAM")
	var thisExpression = ast.newFunctionCall($$[$0-2], new ast.FunctionArgExpressionList());
	yy.pStack.push(thisExpression);

break;
case 177:
	yy.logDebugGrammar("FUNCTION EXPR PARAM")
	var funarg_exp_list = yy.pStack.pop();
	var thisExpression = ast.newFunctionCall($$[$0-3], funarg_exp_list);
	yy.pStack.push(thisExpression);

break;
case 178:
	yy.logDebugGrammar("FUNCTION DISTINCT EXPR PARAM")
	var funarg_exp_list = yy.pStack.pop();
	var thisFunction = ast.newFunctionCall($$[$0-4], funarg_exp_list);
	thisFunction.Distinct = true;
	yy.pStack.push(thisFunction);

break;
case 179:
	yy.logDebugGrammar("FUNCTION EXPR PARAM")
	var funarg_exp_list = yy.pStack.pop();
	var thisExpression = ast.newFunctionCall($$[$0-4], funarg_exp_list);
	yy.pStack.push(thisExpression);

break;
case 180:
	yy.logDebugGrammar("THEN_LIST - SINGLE")
	throw new Error('not_yet_supported');
	/*when_then_list := make([]*ast.WhenThen, 0)
	when_then := ast.WhenThen{Then: parsingStack.Pop().(ast.Expression), When: parsingStack.Pop().(ast.Expression)}
	when_then_list = append(when_then_list, &when_then)
	parsingStack.Push(when_then_list)*/

break;
case 181:
	yy.logDebugGrammar("THEN_LIST - COMPOUND")
	throw new Error('not_yet_supported');
	/*rest := parsingStack.Pop().([]*ast.WhenThen)
	last := ast.WhenThen{Then: parsingStack.Pop().(ast.Expression), When: parsingStack.Pop().(ast.Expression)}
	new_list := make([]*ast.WhenThen, 0, len(rest) + 1)
	new_list = append(new_list, &last)
	for _, v := range rest {
		new_list = append(new_list, v)
	}
	parsingStack.Push(new_list)*/

break;
case 182:
	yy.logDebugGrammar("ELSE - EMPTY")

break;
case 183:
	yy.logDebugGrammar("ELSE - EXPR")

break;
case 184:
	yy.logDebugGrammar("PATH - %v", $$[$0])
	var thisExpression = ast.newProperty($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 185:
	yy.logDebugGrammar("PATH BRACKET - %v[%v]", $$[$0-3], $$[$0-1])
	var left = yy.pStack.pop();
	var thisExpression = ast.newBracketMemberOperator(left, ast.newLiteralNumber($$[$0-1]));
	yy.pStack.push(thisExpression);

break;
case 186:
    yy.logDebugGrammar("PATH SLICE BRACKET MEMBER - %v[%v-%v]", $$[$0-5],$$[$0-3], $$[$0-1])
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-3].n)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 187:
    yy.logDebugGrammar("PATH SLICE BRACKET MEMBER - %v[%v:]", $$[$0-4], $$[$0-2])
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64($$[$0-2].n)), ast.NewLiteralNumber(float64(0)))
    parsingStack.Push(thisExpression)*/


break;
case 188:
    yy.logDebugGrammar("PATH SLICE BRACKET MEMBER -%v[:%v]", $$[$0-4], $$[$0-1])
    throw new Error('not_yet_supported');
    /*left := parsingStack.Pop()
    thisExpression := ast.NewBracketSliceMemberOperator(left.(ast.Expression), ast.NewLiteralNumber(float64(0)), ast.NewLiteralNumber(float64($$[$0-1].n)))
    parsingStack.Push(thisExpression)*/

break;
case 189:
	yy.logDebugGrammar("PATH DOT PATH - $$[$0-2]")
	var right = ast.newProperty($$[$0]);
	var left = yy.pStack.pop();
	var thisExpression = ast.newDotMemberOperator(left, right);
	yy.pStack.push(thisExpression);

break;
case 190:
  var funarg_expr = yy.pStack.pop();
  yy.pStack.push(new ast.FunctionArgExpressionList(funarg_expr));

break;
case 191:
  var funarg_expr_list = yy.pStack.pop();
  var funarg_expr = yy.pStack.pop();
  funarg_expr_list.unshift(funarg_expr);
  yy.pStack.push(funarg_expr_list);

break;
case 192:
	yy.logDebugGrammar("FUNARG STAR")

break;
case 193:
	yy.logDebugGrammar("FUNARG EXPR")
	var expr_part = yy.pStack.pop();
	var funarg_expr = ast.newFunctionArgExpression(expr_part);
	yy.pStack.push(funarg_expr);

break;
case 194:
	yy.logDebugGrammar("FUNSTAR")
	var funarg_expr = ast.newStarFunctionArgExpression();
	yy.pStack.push(funarg_expr);

break;
case 195:
	yy.logDebugGrammar("FUN PATH DOT STAR")
	var expr_part = yy.pStack.pop();
	var funarg_expr = ast.newDotStarFunctionArgExpression(expr_part);
	yy.pStack.push(funarg_expr);

break;
case 196:
	yy.logDebugGrammar("STRING %s", $$[$0]);
	var thisExpression = ast.newLiteralString($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 197:
	yy.logDebugGrammar("NUMBER")

break;
case 198:
	yy.logDebugGrammar("OBJECT")

break;
case 199:
	yy.logDebugGrammar("ARRAY")

break;
case 200:
	yy.logDebugGrammar("TRUE")
	var thisExpression = ast.newLiteralBool(true);
	yy.pStack.push(thisExpression);

break;
case 201:
	yy.logDebugGrammar("FALSE")
	var thisExpression = ast.newLiteralBool(false);
	yy.pStack.push(thisExpression);

break;
case 202:
	yy.logDebugGrammar("NULL")
	var thisExpression = ast.newLiteralNull();
	yy.pStack.push(thisExpression);

break;
case 203:
	yy.logDebugGrammar("NUMBER %d", $$[$0])
	var thisExpression = ast.newLiteralNumber($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 204:
	yy.logDebugGrammar("NUMBER %f", $$[$0])
	var thisExpression = ast.newLiteralNumber($$[$0]);
	yy.pStack.push(thisExpression);

break;
case 205:
	yy.logDebugGrammar("EMPTY OBJECT")
	throw new Error('not_yet_supported');
	/*emptyObject := ast.NewLiteralObject(map[string]ast.Expression{})
	parsingStack.Push(emptyObject)*/

break;
case 206:
	yy.logDebugGrammar("OBJECT")

break;
case 207:
	yy.logDebugGrammar("NAMED EXPR LIST SINGLE")

break;
case 208:
	yy.logDebugGrammar("NAMED EXPR LIST COMPOUND")
	throw new Error('not_yet_supported');
	/*last := parsingStack.Pop().(*ast.LiteralObject)
	rest := parsingStack.Pop().(*ast.LiteralObject)
	for k,v := range last.Val {
		rest.Val[k] = v
	}
	parsingStack.Push(rest)*/

break;
case 209:
	yy.logDebugGrammar("NAMED EXPR SINGLE")
	throw new Error('not_yet_supported');
	/*thisKey := $$[$0-2].s
	thisValue := parsingStack.Pop().(ast.Expression)
	thisExpression := ast.NewLiteralObject(map[string]ast.Expression{thisKey: thisValue})
	parsingStack.Push(thisExpression)*/

break;
case 210:
	yy.logDebugGrammar("EMPTY ARRAY")
	throw new Error('not_yet_supported');
	/*thisExpression := ast.NewLiteralArray(ast.ExpressionList{})
	parsingStack.Push(thisExpression)*/

break;
case 211:
	yy.logDebugGrammar("ARRAY")
	throw new Error('not_yet_supported');
	/*exp_list := parsingStack.Pop().(ast.ExpressionList)
	thisExpression := ast.NewLiteralArray(exp_list)
	parsingStack.Push(thisExpression)*/

break;
case 212:
	yy.logDebugGrammar("EXPRESSION LIST SINGLE")
	var exp_list = new ast.ExpressionList();
	exp_list.push(yy.pStack.pop());
	yy.pStack.push(exp_list);

break;
case 213:
	yy.logDebugGrammar("EXPRESSION LIST COMPOUND")
	// TODO: This may be incorrectly ordered
	var rest = yy.pStack.pop();
	var last = yy.pStack.pop();
	rest.unshift(last);
	yy.pStack.push(rest);

break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:8,10:9,11:[1,12],24:[1,10],25:7,26:11,29:13,33:14,39:15,42:[1,17],53:[1,16]},{1:[3]},{1:[2,1]},{4:18,6:4,7:5,8:6,9:8,10:9,11:[1,12],24:[1,10],25:7,26:11,29:13,33:14,39:15,42:[1,17],53:[1,16]},{1:[2,3]},{1:[2,4]},{1:[2,5]},{1:[2,20],86:[2,20]},{1:[2,6]},{1:[2,7]},{13:[1,19]},{1:[2,107],27:20,70:[1,21],77:[2,107],86:[2,107]},{12:[1,22],13:[1,23]},{1:[2,43],30:24,34:[2,43],53:[1,25],69:[2,43],70:[2,43],77:[2,43],86:[2,43]},{31:26,34:[2,105],42:[2,105],69:[1,27]},{15:[2,30],20:[2,30],40:28,43:[1,29],44:[1,30],45:[1,31],51:[2,30],78:[2,30],82:[2,30],85:[2,30],88:[2,30],100:[2,30],103:[2,30],110:[2,30],115:[2,30],117:[2,30],118:[2,30],120:[2,30],126:[2,30],130:[2,30],131:[2,30],132:[2,30]},{15:[1,36],16:[1,33],54:32,55:34,58:35},{15:[2,29],20:[2,29],43:[2,29],44:[2,29],45:[2,29],51:[2,29],78:[2,29],82:[2,29],85:[2,29],88:[2,29],100:[2,29],103:[2,29],110:[2,29],115:[2,29],117:[2,29],118:[2,29],120:[2,29],126:[2,29],130:[2,29],131:[2,29],132:[2,29]},{1:[2,2]},{15:[1,37],16:[1,38]},{1:[2,114],28:39,75:40,77:[1,41],86:[2,114]},{35:[1,42]},{13:[1,43]},{15:[1,44]},{1:[2,105],31:45,34:[2,105],69:[1,27],70:[2,105],77:[2,105],86:[2,105]},{15:[1,36],16:[1,47],54:46,55:34,58:35},{32:48,34:[1,49],42:[2,24]},{15:[1,59],20:[1,61],38:50,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],38:81,41:77,46:78,47:79,49:80,51:[1,82],52:83,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[2,31],20:[2,31],51:[2,31],78:[2,31],82:[2,31],85:[2,31],88:[2,31],100:[2,31],103:[2,31],110:[2,31],115:[2,31],117:[2,31],118:[2,31],120:[2,31],126:[2,31],130:[2,31],131:[2,31],132:[2,31]},{15:[2,32],20:[2,32],51:[2,32],78:[2,32],82:[2,32],85:[2,32],88:[2,32],100:[2,32],103:[2,32],110:[2,32],115:[2,32],117:[2,32],118:[2,32],120:[2,32],126:[2,32],130:[2,32],131:[2,32],132:[2,32]},{15:[2,33],20:[2,33],51:[2,33],78:[2,33],82:[2,33],85:[2,33],88:[2,33],100:[2,33],103:[2,33],110:[2,33],115:[2,33],117:[2,33],118:[2,33],120:[2,33],126:[2,33],130:[2,33],131:[2,33],132:[2,33]},{34:[2,46],42:[2,46],69:[2,46]},{15:[1,84]},{1:[2,48],34:[2,48],42:[2,48],56:85,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,48],70:[2,48],77:[2,48],86:[2,48]},{1:[2,97],15:[1,94],17:[1,96],34:[2,97],42:[2,97],50:[1,93],57:[2,97],60:92,61:[2,97],63:[2,97],64:[1,97],65:[1,98],66:[2,97],67:[2,97],69:[2,97],70:[2,97],77:[2,97],86:[2,97],100:[1,95]},{1:[2,184],15:[2,184],17:[2,184],34:[2,184],42:[2,184],50:[2,184],57:[2,184],61:[2,184],63:[2,184],64:[2,184],65:[2,184],66:[2,184],67:[2,184],69:[2,184],70:[2,184],77:[2,184],86:[2,184],100:[2,184]},{17:[1,99]},{15:[1,100]},{1:[2,21],86:[2,21]},{1:[2,115],76:101,79:[1,102],86:[2,115]},{78:[1,103]},{15:[1,59],20:[1,61],38:106,52:51,71:104,72:105,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{14:[1,107]},{14:[1,108]},{1:[2,24],32:109,34:[1,49],70:[2,24],77:[2,24],86:[2,24]},{1:[2,44],34:[2,44],69:[2,44],70:[2,44],77:[2,44],86:[2,44]},{15:[1,110]},{29:111,39:15,42:[1,17]},{35:[1,112]},{1:[2,106],34:[2,106],42:[2,106],70:[2,106],77:[2,106],86:[2,106]},{1:[2,119],15:[2,119],17:[1,131],22:[2,119],34:[2,119],37:[2,119],42:[2,119],48:[2,119],50:[2,119],51:[1,118],53:[2,119],69:[2,119],70:[2,119],73:[2,119],74:[2,119],77:[2,119],80:[1,113],81:[1,122],82:[1,114],83:[1,115],86:[2,119],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],101:[2,119],102:[1,133]},{1:[2,124],15:[2,124],22:[2,124],34:[2,124],37:[2,124],42:[2,124],48:[2,124],50:[2,124],53:[2,124],69:[2,124],70:[2,124],73:[2,124],74:[2,124],77:[2,124],86:[2,124],101:[2,124]},{1:[2,154],15:[2,154],17:[2,154],22:[2,154],34:[2,154],37:[2,154],42:[2,154],48:[2,154],50:[2,154],51:[2,154],53:[2,154],57:[2,154],61:[2,154],63:[2,154],66:[2,154],67:[2,154],69:[2,154],70:[2,154],73:[2,154],74:[2,154],77:[2,154],80:[2,154],81:[2,154],82:[2,154],83:[2,154],86:[2,154],87:[2,154],88:[2,154],89:[2,154],90:[2,154],91:[2,154],92:[2,154],93:[2,154],94:[2,154],95:[2,154],96:[2,154],97:[2,154],98:[2,154],99:[2,154],100:[2,154],101:[2,154],102:[2,154],111:[2,154],114:[2,154],116:[2,154],119:[2,154],122:[2,154],123:[2,154]},{6:134,25:7,26:11,29:13,33:14,39:15,42:[1,17],53:[1,16],86:[1,135],126:[1,138],133:136,134:137},{15:[1,59],20:[1,61],78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:139,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:141,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,157],15:[2,157],17:[2,157],22:[2,157],34:[2,157],37:[2,157],42:[2,157],48:[2,157],50:[2,157],51:[2,157],53:[2,157],57:[2,157],61:[2,157],63:[2,157],66:[2,157],67:[2,157],69:[2,157],70:[2,157],73:[2,157],74:[2,157],77:[2,157],80:[2,157],81:[2,157],82:[2,157],83:[2,157],86:[2,157],87:[2,157],88:[2,157],89:[2,157],90:[2,157],91:[2,157],92:[2,157],93:[2,157],94:[2,157],95:[2,157],96:[2,157],97:[2,157],98:[2,157],99:[2,157],100:[2,157],101:[2,157],102:[2,157],111:[2,157],114:[2,157],116:[2,157],119:[2,157],122:[2,157],123:[2,157]},{1:[2,158],15:[2,158],17:[2,158],22:[2,158],34:[2,158],37:[2,158],42:[2,158],48:[2,158],50:[2,158],51:[2,158],53:[2,158],57:[2,158],61:[2,158],63:[2,158],66:[2,158],67:[2,158],69:[2,158],70:[2,158],73:[2,158],74:[2,158],77:[2,158],80:[2,158],81:[2,158],82:[2,158],83:[2,158],86:[2,158],87:[2,158],88:[2,158],89:[2,158],90:[2,158],91:[2,158],92:[2,158],93:[2,158],94:[2,158],95:[2,158],96:[2,158],97:[2,158],98:[2,158],99:[2,158],100:[2,158],101:[2,158],102:[2,158],111:[2,158],114:[2,158],116:[2,158],119:[2,158],122:[2,158],123:[2,158]},{1:[2,159],15:[2,159],17:[2,159],20:[1,142],22:[2,159],34:[2,159],37:[2,159],42:[2,159],48:[2,159],50:[2,159],51:[2,159],53:[2,159],57:[2,159],61:[2,159],63:[2,159],66:[2,159],67:[2,159],69:[2,159],70:[2,159],73:[2,159],74:[2,159],77:[2,159],80:[2,159],81:[2,159],82:[2,159],83:[2,159],86:[2,159],87:[2,159],88:[2,159],89:[2,159],90:[2,159],91:[2,159],92:[2,159],93:[2,159],94:[2,159],95:[2,159],96:[2,159],97:[2,159],98:[2,159],99:[2,159],100:[2,159],101:[2,159],102:[2,159],111:[2,159],114:[2,159],116:[2,159],119:[2,159],122:[2,159],123:[2,159]},{1:[2,160],15:[2,160],17:[2,160],22:[2,160],34:[2,160],37:[2,160],42:[2,160],48:[2,160],50:[2,160],51:[2,160],53:[2,160],57:[2,160],61:[2,160],63:[2,160],66:[2,160],67:[2,160],69:[2,160],70:[2,160],73:[2,160],74:[2,160],77:[2,160],80:[2,160],81:[2,160],82:[2,160],83:[2,160],86:[2,160],87:[2,160],88:[2,160],89:[2,160],90:[2,160],91:[2,160],92:[2,160],93:[2,160],94:[2,160],95:[2,160],96:[2,160],97:[2,160],98:[2,160],99:[2,160],100:[2,160],101:[2,160],102:[2,160],111:[2,160],114:[2,160],116:[2,160],119:[2,160],122:[2,160],123:[2,160]},{15:[1,59],20:[1,61],38:143,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:145,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],111:[1,144],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,147],20:[1,61],52:146,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,148],20:[1,61],52:149,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:150,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:151,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,196],15:[2,196],17:[2,196],22:[2,196],34:[2,196],37:[2,196],42:[2,196],48:[2,196],50:[2,196],51:[2,196],53:[2,196],57:[2,196],61:[2,196],63:[2,196],66:[2,196],67:[2,196],69:[2,196],70:[2,196],73:[2,196],74:[2,196],77:[2,196],80:[2,196],81:[2,196],82:[2,196],83:[2,196],86:[2,196],87:[2,196],88:[2,196],89:[2,196],90:[2,196],91:[2,196],92:[2,196],93:[2,196],94:[2,196],95:[2,196],96:[2,196],97:[2,196],98:[2,196],99:[2,196],100:[2,196],101:[2,196],102:[2,196],111:[2,196],114:[2,196],116:[2,196],119:[2,196],122:[2,196],123:[2,196]},{1:[2,197],15:[2,197],17:[2,197],22:[2,197],34:[2,197],37:[2,197],42:[2,197],48:[2,197],50:[2,197],51:[2,197],53:[2,197],57:[2,197],61:[2,197],63:[2,197],66:[2,197],67:[2,197],69:[2,197],70:[2,197],73:[2,197],74:[2,197],77:[2,197],80:[2,197],81:[2,197],82:[2,197],83:[2,197],86:[2,197],87:[2,197],88:[2,197],89:[2,197],90:[2,197],91:[2,197],92:[2,197],93:[2,197],94:[2,197],95:[2,197],96:[2,197],97:[2,197],98:[2,197],99:[2,197],100:[2,197],101:[2,197],102:[2,197],111:[2,197],114:[2,197],116:[2,197],119:[2,197],122:[2,197],123:[2,197]},{1:[2,198],15:[2,198],17:[2,198],22:[2,198],34:[2,198],37:[2,198],42:[2,198],48:[2,198],50:[2,198],51:[2,198],53:[2,198],57:[2,198],61:[2,198],63:[2,198],66:[2,198],67:[2,198],69:[2,198],70:[2,198],73:[2,198],74:[2,198],77:[2,198],80:[2,198],81:[2,198],82:[2,198],83:[2,198],86:[2,198],87:[2,198],88:[2,198],89:[2,198],90:[2,198],91:[2,198],92:[2,198],93:[2,198],94:[2,198],95:[2,198],96:[2,198],97:[2,198],98:[2,198],99:[2,198],100:[2,198],101:[2,198],102:[2,198],111:[2,198],114:[2,198],116:[2,198],119:[2,198],122:[2,198],123:[2,198]},{1:[2,199],15:[2,199],17:[2,199],22:[2,199],34:[2,199],37:[2,199],42:[2,199],48:[2,199],50:[2,199],51:[2,199],53:[2,199],57:[2,199],61:[2,199],63:[2,199],66:[2,199],67:[2,199],69:[2,199],70:[2,199],73:[2,199],74:[2,199],77:[2,199],80:[2,199],81:[2,199],82:[2,199],83:[2,199],86:[2,199],87:[2,199],88:[2,199],89:[2,199],90:[2,199],91:[2,199],92:[2,199],93:[2,199],94:[2,199],95:[2,199],96:[2,199],97:[2,199],98:[2,199],99:[2,199],100:[2,199],101:[2,199],102:[2,199],111:[2,199],114:[2,199],116:[2,199],119:[2,199],122:[2,199],123:[2,199]},{1:[2,200],15:[2,200],17:[2,200],22:[2,200],34:[2,200],37:[2,200],42:[2,200],48:[2,200],50:[2,200],51:[2,200],53:[2,200],57:[2,200],61:[2,200],63:[2,200],66:[2,200],67:[2,200],69:[2,200],70:[2,200],73:[2,200],74:[2,200],77:[2,200],80:[2,200],81:[2,200],82:[2,200],83:[2,200],86:[2,200],87:[2,200],88:[2,200],89:[2,200],90:[2,200],91:[2,200],92:[2,200],93:[2,200],94:[2,200],95:[2,200],96:[2,200],97:[2,200],98:[2,200],99:[2,200],100:[2,200],101:[2,200],102:[2,200],111:[2,200],114:[2,200],116:[2,200],119:[2,200],122:[2,200],123:[2,200]},{1:[2,201],15:[2,201],17:[2,201],22:[2,201],34:[2,201],37:[2,201],42:[2,201],48:[2,201],50:[2,201],51:[2,201],53:[2,201],57:[2,201],61:[2,201],63:[2,201],66:[2,201],67:[2,201],69:[2,201],70:[2,201],73:[2,201],74:[2,201],77:[2,201],80:[2,201],81:[2,201],82:[2,201],83:[2,201],86:[2,201],87:[2,201],88:[2,201],89:[2,201],90:[2,201],91:[2,201],92:[2,201],93:[2,201],94:[2,201],95:[2,201],96:[2,201],97:[2,201],98:[2,201],99:[2,201],100:[2,201],101:[2,201],102:[2,201],111:[2,201],114:[2,201],116:[2,201],119:[2,201],122:[2,201],123:[2,201]},{1:[2,202],15:[2,202],17:[2,202],22:[2,202],34:[2,202],37:[2,202],42:[2,202],48:[2,202],50:[2,202],51:[2,202],53:[2,202],57:[2,202],61:[2,202],63:[2,202],66:[2,202],67:[2,202],69:[2,202],70:[2,202],73:[2,202],74:[2,202],77:[2,202],80:[2,202],81:[2,202],82:[2,202],83:[2,202],86:[2,202],87:[2,202],88:[2,202],89:[2,202],90:[2,202],91:[2,202],92:[2,202],93:[2,202],94:[2,202],95:[2,202],96:[2,202],97:[2,202],98:[2,202],99:[2,202],100:[2,202],101:[2,202],102:[2,202],111:[2,202],114:[2,202],116:[2,202],119:[2,202],122:[2,202],123:[2,202]},{1:[2,203],15:[2,203],17:[2,203],22:[2,203],34:[2,203],37:[2,203],42:[2,203],48:[2,203],50:[2,203],51:[2,203],53:[2,203],57:[2,203],61:[2,203],63:[2,203],66:[2,203],67:[2,203],69:[2,203],70:[2,203],73:[2,203],74:[2,203],77:[2,203],80:[2,203],81:[2,203],82:[2,203],83:[2,203],86:[2,203],87:[2,203],88:[2,203],89:[2,203],90:[2,203],91:[2,203],92:[2,203],93:[2,203],94:[2,203],95:[2,203],96:[2,203],97:[2,203],98:[2,203],99:[2,203],100:[2,203],101:[2,203],102:[2,203],111:[2,203],114:[2,203],116:[2,203],119:[2,203],122:[2,203],123:[2,203]},{1:[2,204],15:[2,204],17:[2,204],22:[2,204],34:[2,204],37:[2,204],42:[2,204],48:[2,204],50:[2,204],51:[2,204],53:[2,204],57:[2,204],61:[2,204],63:[2,204],66:[2,204],67:[2,204],69:[2,204],70:[2,204],73:[2,204],74:[2,204],77:[2,204],80:[2,204],81:[2,204],82:[2,204],83:[2,204],86:[2,204],87:[2,204],88:[2,204],89:[2,204],90:[2,204],91:[2,204],92:[2,204],93:[2,204],94:[2,204],95:[2,204],96:[2,204],97:[2,204],98:[2,204],99:[2,204],100:[2,204],101:[2,204],102:[2,204],111:[2,204],114:[2,204],116:[2,204],119:[2,204],122:[2,204],123:[2,204]},{15:[1,59],20:[1,61],21:153,38:154,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],101:[1,152],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,28],34:[2,28],53:[2,28],69:[2,28],70:[2,28],77:[2,28],86:[2,28]},{1:[2,34],34:[2,34],53:[2,34],69:[2,34],70:[2,34],77:[2,34],86:[2,34]},{1:[2,35],34:[2,35],48:[1,155],53:[2,35],69:[2,35],70:[2,35],77:[2,35],86:[2,35]},{1:[2,37],34:[2,37],48:[2,37],53:[2,37],69:[2,37],70:[2,37],77:[2,37],86:[2,37]},{1:[2,38],15:[1,157],34:[2,38],48:[2,38],50:[1,156],53:[2,38],69:[2,38],70:[2,38],77:[2,38],86:[2,38]},{1:[2,41],34:[2,41],48:[2,41],53:[2,41],69:[2,41],70:[2,41],77:[2,41],86:[2,41]},{1:[2,119],15:[2,119],17:[1,158],34:[2,119],48:[2,119],50:[2,119],51:[1,118],53:[2,119],69:[2,119],70:[2,119],77:[2,119],80:[1,113],81:[1,122],82:[1,114],83:[1,115],86:[2,119],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{17:[1,159]},{1:[2,49],34:[2,49],42:[2,49],69:[2,49],70:[2,49],77:[2,49],86:[2,49]},{15:[1,36],58:160},{57:[1,161],61:[1,162],63:[1,163]},{15:[1,36],58:164},{15:[1,36],58:165},{57:[2,94],61:[2,94],63:[2,94]},{57:[2,95],61:[2,95],63:[2,95],68:[1,166]},{1:[2,98],34:[2,98],42:[2,98],57:[2,98],61:[2,98],63:[2,98],66:[2,98],67:[2,98],69:[2,98],70:[2,98],77:[2,98],86:[2,98]},{15:[1,167]},{1:[2,100],34:[2,100],42:[2,100],57:[2,100],60:168,61:[2,100],63:[2,100],64:[1,97],65:[1,98],66:[2,100],67:[2,100],69:[2,100],70:[2,100],77:[2,100],86:[2,100]},{16:[1,170],78:[1,169]},{15:[1,171]},{15:[1,59],20:[1,61],52:172,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:173,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,174]},{17:[1,175]},{1:[2,116],86:[2,116]},{78:[1,176]},{1:[2,117],79:[2,117],86:[2,117]},{1:[2,108],77:[2,108],86:[2,108]},{1:[2,109],48:[1,177],77:[2,109],86:[2,109]},{1:[2,111],48:[2,111],73:[1,178],74:[1,179],77:[2,111],86:[2,111]},{15:[1,180],16:[1,181]},{15:[1,182],16:[1,183]},{1:[2,22],70:[2,22],77:[2,22],86:[2,22]},{17:[1,184]},{1:[2,23],70:[2,23],77:[2,23],86:[2,23]},{15:[1,59],20:[1,61],21:185,38:154,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:186,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{80:[1,187],83:[1,188],99:[1,189]},{15:[1,59],20:[1,61],38:190,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:191,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:192,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:193,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:194,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:195,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:196,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:197,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:198,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:199,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:200,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:201,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:202,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:203,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:204,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:205,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,206]},{15:[1,59],16:[1,209],20:[1,61],52:207,78:[1,208],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{82:[1,211],103:[1,210],104:[1,212],105:[1,213]},{86:[1,214]},{1:[2,205],15:[2,205],17:[2,205],22:[2,205],34:[2,205],37:[2,205],42:[2,205],48:[2,205],50:[2,205],51:[2,205],53:[2,205],57:[2,205],61:[2,205],63:[2,205],66:[2,205],67:[2,205],69:[2,205],70:[2,205],73:[2,205],74:[2,205],77:[2,205],80:[2,205],81:[2,205],82:[2,205],83:[2,205],86:[2,205],87:[2,205],88:[2,205],89:[2,205],90:[2,205],91:[2,205],92:[2,205],93:[2,205],94:[2,205],95:[2,205],96:[2,205],97:[2,205],98:[2,205],99:[2,205],100:[2,205],101:[2,205],102:[2,205],111:[2,205],114:[2,205],116:[2,205],119:[2,205],122:[2,205],123:[2,205]},{86:[1,215]},{48:[1,216],86:[2,207]},{16:[1,217]},{1:[2,155],15:[2,155],17:[2,155],22:[2,155],34:[2,155],37:[2,155],42:[2,155],48:[2,155],50:[2,155],51:[2,155],53:[2,155],57:[2,155],61:[2,155],63:[2,155],66:[2,155],67:[2,155],69:[2,155],70:[2,155],73:[2,155],74:[2,155],77:[2,155],80:[2,155],81:[2,155],82:[2,155],83:[2,155],86:[2,155],87:[2,155],88:[2,155],89:[2,155],90:[2,155],91:[2,155],92:[2,155],93:[2,155],94:[2,155],95:[2,155],96:[2,155],97:[2,155],98:[2,155],99:[2,155],100:[2,155],101:[2,155],102:[2,155],111:[2,155],114:[2,155],116:[2,155],119:[2,155],122:[2,155],123:[2,155]},{86:[1,135],126:[1,138],133:136,134:137},{1:[2,156],15:[2,156],17:[2,156],22:[2,156],34:[2,156],37:[2,156],42:[2,156],48:[2,156],50:[2,156],51:[2,156],53:[2,156],57:[2,156],61:[2,156],63:[2,156],66:[2,156],67:[2,156],69:[2,156],70:[2,156],73:[2,156],74:[2,156],77:[2,156],80:[2,156],81:[2,156],82:[2,156],83:[2,156],86:[2,156],87:[2,156],88:[2,156],89:[2,156],90:[2,156],91:[2,156],92:[2,156],93:[2,156],94:[2,156],95:[2,156],96:[2,156],97:[2,156],98:[2,156],99:[2,156],100:[2,156],101:[2,156],102:[2,156],111:[2,156],114:[2,156],116:[2,156],119:[2,156],122:[2,156],123:[2,156]},{15:[1,59],20:[1,61],22:[1,218],38:224,44:[1,220],45:[1,221],51:[1,225],52:226,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],121:219,124:222,125:223,126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{22:[1,227]},{15:[1,59],20:[1,61],52:229,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],112:228,115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],111:[1,230]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],116:[1,232]},{17:[2,159],20:[1,142],51:[2,159],81:[2,159],82:[2,159],83:[1,233],87:[2,159],88:[2,159],89:[2,159],90:[2,159],91:[2,159],92:[2,159],93:[2,159],94:[2,159],95:[2,159],96:[2,159],97:[2,159],98:[2,159],99:[2,159],100:[2,159],102:[2,159],116:[2,159]},{17:[2,159],20:[1,142],51:[2,159],81:[2,159],82:[2,159],83:[1,234],87:[2,159],88:[2,159],89:[2,159],90:[2,159],91:[2,159],92:[2,159],93:[2,159],94:[2,159],95:[2,159],96:[2,159],97:[2,159],98:[2,159],99:[2,159],100:[2,159],102:[2,159],116:[2,159]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],116:[1,235]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],83:[1,237],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],119:[1,236]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],83:[1,239],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],119:[1,238]},{1:[2,210],15:[2,210],17:[2,210],22:[2,210],34:[2,210],37:[2,210],42:[2,210],48:[2,210],50:[2,210],51:[2,210],53:[2,210],57:[2,210],61:[2,210],63:[2,210],66:[2,210],67:[2,210],69:[2,210],70:[2,210],73:[2,210],74:[2,210],77:[2,210],80:[2,210],81:[2,210],82:[2,210],83:[2,210],86:[2,210],87:[2,210],88:[2,210],89:[2,210],90:[2,210],91:[2,210],92:[2,210],93:[2,210],94:[2,210],95:[2,210],96:[2,210],97:[2,210],98:[2,210],99:[2,210],100:[2,210],101:[2,210],102:[2,210],111:[2,210],114:[2,210],116:[2,210],119:[2,210],122:[2,210],123:[2,210]},{101:[1,240]},{1:[2,212],22:[2,212],37:[2,212],42:[2,212],48:[1,241],70:[2,212],77:[2,212],86:[2,212],101:[2,212]},{15:[1,59],20:[1,61],38:81,46:242,47:79,49:80,51:[1,82],52:83,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,243]},{1:[2,40],34:[2,40],48:[2,40],53:[2,40],69:[2,40],70:[2,40],77:[2,40],86:[2,40]},{15:[1,206],51:[1,244]},{15:[1,36],54:245,55:34,58:35},{1:[2,50],15:[1,247],17:[1,96],34:[2,50],42:[2,50],50:[1,246],56:248,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,50],70:[2,50],77:[2,50],86:[2,50],100:[1,95]},{15:[1,36],58:249},{15:[1,36],58:250},{15:[1,36],58:251},{15:[1,254],17:[1,96],50:[1,253],62:252,64:[1,255],65:[1,256],100:[1,95]},{15:[1,259],17:[1,96],50:[1,258],62:257,64:[1,255],65:[1,256],100:[1,95]},{57:[2,96],61:[2,96],63:[2,96]},{1:[2,99],34:[2,99],42:[2,99],57:[2,99],60:260,61:[2,99],63:[2,99],64:[1,97],65:[1,98],66:[2,99],67:[2,99],69:[2,99],70:[2,99],77:[2,99],86:[2,99]},{1:[2,102],34:[2,102],42:[2,102],57:[2,102],61:[2,102],63:[2,102],66:[2,102],67:[2,102],69:[2,102],70:[2,102],77:[2,102],86:[2,102]},{16:[1,262],101:[1,261]},{78:[1,263]},{1:[2,189],15:[2,189],17:[2,189],34:[2,189],42:[2,189],50:[2,189],57:[2,189],61:[2,189],63:[2,189],64:[2,189],65:[2,189],66:[2,189],67:[2,189],69:[2,189],70:[2,189],77:[2,189],86:[2,189],100:[2,189]},{1:[2,103],17:[1,131],34:[2,103],42:[2,103],51:[1,118],57:[2,103],61:[2,103],63:[2,103],66:[2,103],67:[2,103],69:[2,103],70:[2,103],77:[2,103],81:[1,122],82:[1,231],86:[2,103],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{1:[2,104],17:[1,131],34:[2,104],42:[2,104],51:[1,118],57:[2,104],61:[2,104],63:[2,104],66:[2,104],67:[2,104],69:[2,104],70:[2,104],77:[2,104],81:[1,122],82:[1,231],86:[2,104],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{1:[2,18]},{15:[1,264]},{1:[2,118],86:[2,118]},{15:[1,59],20:[1,61],38:106,52:51,71:265,72:105,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,112],48:[2,112],77:[2,112],86:[2,112]},{1:[2,113],48:[2,113],77:[2,113],86:[2,113]},{1:[2,8],18:[1,266]},{15:[1,267]},{20:[1,268]},{15:[1,269]},{15:[1,36],54:270,55:34,58:35},{1:[2,26],36:271,37:[1,272],42:[2,26],70:[2,26],77:[2,26],86:[2,26]},{17:[1,131],51:[1,118],81:[1,273],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{15:[1,59],20:[1,61],52:274,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],38:275,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:276,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,122],15:[2,122],22:[2,122],34:[2,122],37:[2,122],42:[2,122],48:[2,122],50:[2,122],53:[2,122],69:[2,122],70:[2,122],73:[2,122],74:[2,122],77:[2,122],86:[2,122],101:[2,122]},{1:[2,127],15:[2,127],17:[1,131],22:[2,127],34:[2,127],37:[2,127],42:[2,127],48:[2,127],50:[2,127],51:[1,118],53:[2,127],57:[2,127],61:[2,127],63:[2,127],66:[2,127],67:[2,127],69:[2,127],70:[2,127],73:[2,127],74:[2,127],77:[2,127],80:[2,127],81:[2,127],82:[1,231],83:[2,127],86:[2,127],87:[2,127],88:[2,127],89:[1,119],90:[1,120],91:[1,121],92:[2,127],93:[2,127],94:[2,127],95:[2,127],96:[2,127],97:[2,127],98:[2,127],99:[2,127],100:[1,132],101:[2,127],102:[1,133],111:[2,127],114:[2,127],116:[2,127],119:[2,127],122:[2,127],123:[2,127]},{1:[2,128],15:[2,128],17:[1,131],22:[2,128],34:[2,128],37:[2,128],42:[2,128],48:[2,128],50:[2,128],51:[1,118],53:[2,128],57:[2,128],61:[2,128],63:[2,128],66:[2,128],67:[2,128],69:[2,128],70:[2,128],73:[2,128],74:[2,128],77:[2,128],80:[2,128],81:[2,128],82:[1,231],83:[2,128],86:[2,128],87:[2,128],88:[2,128],89:[1,119],90:[1,120],91:[1,121],92:[2,128],93:[2,128],94:[2,128],95:[2,128],96:[2,128],97:[2,128],98:[2,128],99:[2,128],100:[1,132],101:[2,128],102:[1,133],111:[2,128],114:[2,128],116:[2,128],119:[2,128],122:[2,128],123:[2,128]},{1:[2,129],15:[2,129],17:[1,131],22:[2,129],34:[2,129],37:[2,129],42:[2,129],48:[2,129],50:[2,129],51:[2,129],53:[2,129],57:[2,129],61:[2,129],63:[2,129],66:[2,129],67:[2,129],69:[2,129],70:[2,129],73:[2,129],74:[2,129],77:[2,129],80:[2,129],81:[2,129],82:[1,231],83:[2,129],86:[2,129],87:[2,129],88:[2,129],89:[2,129],90:[2,129],91:[2,129],92:[2,129],93:[2,129],94:[2,129],95:[2,129],96:[2,129],97:[2,129],98:[2,129],99:[2,129],100:[1,132],101:[2,129],102:[1,133],111:[2,129],114:[2,129],116:[2,129],119:[2,129],122:[2,129],123:[2,129]},{1:[2,130],15:[2,130],17:[1,131],22:[2,130],34:[2,130],37:[2,130],42:[2,130],48:[2,130],50:[2,130],51:[2,130],53:[2,130],57:[2,130],61:[2,130],63:[2,130],66:[2,130],67:[2,130],69:[2,130],70:[2,130],73:[2,130],74:[2,130],77:[2,130],80:[2,130],81:[2,130],82:[1,231],83:[2,130],86:[2,130],87:[2,130],88:[2,130],89:[2,130],90:[2,130],91:[2,130],92:[2,130],93:[2,130],94:[2,130],95:[2,130],96:[2,130],97:[2,130],98:[2,130],99:[2,130],100:[1,132],101:[2,130],102:[1,133],111:[2,130],114:[2,130],116:[2,130],119:[2,130],122:[2,130],123:[2,130]},{1:[2,131],15:[2,131],17:[1,131],22:[2,131],34:[2,131],37:[2,131],42:[2,131],48:[2,131],50:[2,131],51:[2,131],53:[2,131],57:[2,131],61:[2,131],63:[2,131],66:[2,131],67:[2,131],69:[2,131],70:[2,131],73:[2,131],74:[2,131],77:[2,131],80:[2,131],81:[2,131],82:[1,231],83:[2,131],86:[2,131],87:[2,131],88:[2,131],89:[2,131],90:[2,131],91:[2,131],92:[2,131],93:[2,131],94:[2,131],95:[2,131],96:[2,131],97:[2,131],98:[2,131],99:[2,131],100:[1,132],101:[2,131],102:[1,133],111:[2,131],114:[2,131],116:[2,131],119:[2,131],122:[2,131],123:[2,131]},{1:[2,132],15:[2,132],17:[1,131],22:[2,132],34:[2,132],37:[2,132],42:[2,132],48:[2,132],50:[2,132],51:[2,132],53:[2,132],57:[2,132],61:[2,132],63:[2,132],66:[2,132],67:[2,132],69:[2,132],70:[2,132],73:[2,132],74:[2,132],77:[2,132],80:[2,132],81:[2,132],82:[1,231],83:[2,132],86:[2,132],87:[2,132],88:[2,132],89:[2,132],90:[2,132],91:[2,132],92:[2,132],93:[2,132],94:[2,132],95:[2,132],96:[2,132],97:[2,132],98:[2,132],99:[2,132],100:[1,132],101:[2,132],102:[1,133],111:[2,132],114:[2,132],116:[2,132],119:[2,132],122:[2,132],123:[2,132]},{1:[2,133],15:[2,133],17:[1,131],22:[2,133],34:[2,133],37:[2,133],42:[2,133],48:[2,133],50:[2,133],51:[1,118],53:[2,133],57:[2,133],61:[2,133],63:[2,133],66:[2,133],67:[2,133],69:[2,133],70:[2,133],73:[2,133],74:[2,133],77:[2,133],80:[2,133],81:[2,133],82:[1,231],83:[2,133],86:[2,133],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,133],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],101:[2,133],102:[1,133],111:[2,133],114:[2,133],116:[2,133],119:[2,133],122:[2,133],123:[2,133]},{1:[2,134],15:[2,134],17:[1,131],22:[2,134],34:[2,134],37:[2,134],42:[2,134],48:[2,134],50:[2,134],51:[1,118],53:[2,134],57:[2,134],61:[2,134],63:[2,134],66:[2,134],67:[2,134],69:[2,134],70:[2,134],73:[2,134],74:[2,134],77:[2,134],80:[2,134],81:[1,122],82:[1,231],83:[2,134],86:[2,134],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,134],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],101:[2,134],102:[1,133],111:[2,134],114:[2,134],116:[2,134],119:[2,134],122:[2,134],123:[2,134]},{1:[2,135],15:[2,135],17:[1,131],22:[2,135],34:[2,135],37:[2,135],42:[2,135],48:[2,135],50:[2,135],51:[1,118],53:[2,135],57:[2,135],61:[2,135],63:[2,135],66:[2,135],67:[2,135],69:[2,135],70:[2,135],73:[2,135],74:[2,135],77:[2,135],80:[2,135],81:[2,135],82:[1,231],83:[2,135],86:[2,135],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,135],93:[2,135],94:[2,135],95:[2,135],96:[2,135],97:[2,135],98:[2,135],99:[2,135],100:[1,132],101:[2,135],102:[1,133],111:[2,135],114:[2,135],116:[2,135],119:[2,135],122:[2,135],123:[2,135]},{1:[2,136],15:[2,136],17:[1,131],22:[2,136],34:[2,136],37:[2,136],42:[2,136],48:[2,136],50:[2,136],51:[1,118],53:[2,136],57:[2,136],61:[2,136],63:[2,136],66:[2,136],67:[2,136],69:[2,136],70:[2,136],73:[2,136],74:[2,136],77:[2,136],80:[2,136],81:[2,136],82:[1,231],83:[2,136],86:[2,136],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,136],93:[2,136],94:[2,136],95:[2,136],96:[2,136],97:[2,136],98:[2,136],99:[2,136],100:[1,132],101:[2,136],102:[1,133],111:[2,136],114:[2,136],116:[2,136],119:[2,136],122:[2,136],123:[2,136]},{1:[2,137],15:[2,137],17:[1,131],22:[2,137],34:[2,137],37:[2,137],42:[2,137],48:[2,137],50:[2,137],51:[1,118],53:[2,137],57:[2,137],61:[2,137],63:[2,137],66:[2,137],67:[2,137],69:[2,137],70:[2,137],73:[2,137],74:[2,137],77:[2,137],80:[2,137],81:[2,137],82:[1,231],83:[2,137],86:[2,137],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,137],93:[2,137],94:[2,137],95:[2,137],96:[2,137],97:[2,137],98:[2,137],99:[2,137],100:[1,132],101:[2,137],102:[1,133],111:[2,137],114:[2,137],116:[2,137],119:[2,137],122:[2,137],123:[2,137]},{1:[2,138],15:[2,138],17:[1,131],22:[2,138],34:[2,138],37:[2,138],42:[2,138],48:[2,138],50:[2,138],51:[1,118],53:[2,138],57:[2,138],61:[2,138],63:[2,138],66:[2,138],67:[2,138],69:[2,138],70:[2,138],73:[2,138],74:[2,138],77:[2,138],80:[2,138],81:[2,138],82:[1,231],83:[2,138],86:[2,138],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,138],93:[2,138],94:[2,138],95:[2,138],96:[2,138],97:[2,138],98:[2,138],99:[2,138],100:[1,132],101:[2,138],102:[1,133],111:[2,138],114:[2,138],116:[2,138],119:[2,138],122:[2,138],123:[2,138]},{1:[2,139],15:[2,139],17:[1,131],22:[2,139],34:[2,139],37:[2,139],42:[2,139],48:[2,139],50:[2,139],51:[1,118],53:[2,139],57:[2,139],61:[2,139],63:[2,139],66:[2,139],67:[2,139],69:[2,139],70:[2,139],73:[2,139],74:[2,139],77:[2,139],80:[2,139],81:[2,139],82:[1,231],83:[2,139],86:[2,139],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,139],93:[2,139],94:[2,139],95:[2,139],96:[2,139],97:[2,139],98:[2,139],99:[2,139],100:[1,132],101:[2,139],102:[1,133],111:[2,139],114:[2,139],116:[2,139],119:[2,139],122:[2,139],123:[2,139]},{1:[2,140],15:[2,140],17:[1,131],22:[2,140],34:[2,140],37:[2,140],42:[2,140],48:[2,140],50:[2,140],51:[1,118],53:[2,140],57:[2,140],61:[2,140],63:[2,140],66:[2,140],67:[2,140],69:[2,140],70:[2,140],73:[2,140],74:[2,140],77:[2,140],80:[2,140],81:[2,140],82:[1,231],83:[2,140],86:[2,140],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,140],93:[2,140],94:[2,140],95:[2,140],96:[2,140],97:[2,140],98:[2,140],99:[2,140],100:[1,132],101:[2,140],102:[1,133],111:[2,140],114:[2,140],116:[2,140],119:[2,140],122:[2,140],123:[2,140]},{1:[2,141],15:[2,141],17:[1,131],22:[2,141],34:[2,141],37:[2,141],42:[2,141],48:[2,141],50:[2,141],51:[1,118],53:[2,141],57:[2,141],61:[2,141],63:[2,141],66:[2,141],67:[2,141],69:[2,141],70:[2,141],73:[2,141],74:[2,141],77:[2,141],80:[2,141],81:[2,141],82:[1,231],83:[2,141],86:[2,141],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,141],93:[2,141],94:[2,141],95:[2,141],96:[2,141],97:[2,141],98:[2,141],99:[2,141],100:[1,132],101:[2,141],102:[1,133],111:[2,141],114:[2,141],116:[2,141],119:[2,141],122:[2,141],123:[2,141]},{1:[2,143],15:[2,143],17:[2,143],22:[2,143],34:[2,143],37:[2,143],42:[2,143],48:[2,143],50:[2,143],51:[2,143],53:[2,143],57:[2,143],61:[2,143],63:[2,143],66:[2,143],67:[2,143],69:[2,143],70:[2,143],73:[2,143],74:[2,143],77:[2,143],80:[2,143],81:[2,143],82:[2,143],83:[2,143],86:[2,143],87:[2,143],88:[2,143],89:[2,143],90:[2,143],91:[2,143],92:[2,143],93:[2,143],94:[2,143],95:[2,143],96:[2,143],97:[2,143],98:[2,143],99:[2,143],100:[2,143],101:[2,143],102:[2,143],111:[2,143],114:[2,143],116:[2,143],119:[2,143],122:[2,143],123:[2,143]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],101:[1,277],102:[1,133]},{16:[1,278],17:[2,203],51:[2,203],81:[2,203],82:[2,203],87:[2,203],88:[2,203],89:[2,203],90:[2,203],91:[2,203],92:[2,203],93:[2,203],94:[2,203],95:[2,203],96:[2,203],97:[2,203],98:[2,203],99:[2,203],100:[2,203],101:[2,203],102:[2,203]},{78:[1,279]},{1:[2,148],15:[2,148],17:[2,148],22:[2,148],34:[2,148],37:[2,148],42:[2,148],48:[2,148],50:[2,148],51:[2,148],53:[2,148],57:[2,148],61:[2,148],63:[2,148],66:[2,148],67:[2,148],69:[2,148],70:[2,148],73:[2,148],74:[2,148],77:[2,148],80:[2,148],81:[2,148],82:[2,148],83:[2,148],86:[2,148],87:[2,148],88:[2,148],89:[2,148],90:[2,148],91:[2,148],92:[2,148],93:[2,148],94:[2,148],95:[2,148],96:[2,148],97:[2,148],98:[2,148],99:[2,148],100:[2,148],101:[2,148],102:[2,148],111:[2,148],114:[2,148],116:[2,148],119:[2,148],122:[2,148],123:[2,148]},{103:[1,280],104:[1,281],105:[1,282]},{1:[2,150],15:[2,150],17:[2,150],22:[2,150],34:[2,150],37:[2,150],42:[2,150],48:[2,150],50:[2,150],51:[2,150],53:[2,150],57:[2,150],61:[2,150],63:[2,150],66:[2,150],67:[2,150],69:[2,150],70:[2,150],73:[2,150],74:[2,150],77:[2,150],80:[2,150],81:[2,150],82:[2,150],83:[2,150],86:[2,150],87:[2,150],88:[2,150],89:[2,150],90:[2,150],91:[2,150],92:[2,150],93:[2,150],94:[2,150],95:[2,150],96:[2,150],97:[2,150],98:[2,150],99:[2,150],100:[2,150],101:[2,150],102:[2,150],111:[2,150],114:[2,150],116:[2,150],119:[2,150],122:[2,150],123:[2,150]},{1:[2,152],15:[2,152],17:[2,152],22:[2,152],34:[2,152],37:[2,152],42:[2,152],48:[2,152],50:[2,152],51:[2,152],53:[2,152],57:[2,152],61:[2,152],63:[2,152],66:[2,152],67:[2,152],69:[2,152],70:[2,152],73:[2,152],74:[2,152],77:[2,152],80:[2,152],81:[2,152],82:[2,152],83:[2,152],86:[2,152],87:[2,152],88:[2,152],89:[2,152],90:[2,152],91:[2,152],92:[2,152],93:[2,152],94:[2,152],95:[2,152],96:[2,152],97:[2,152],98:[2,152],99:[2,152],100:[2,152],101:[2,152],102:[2,152],111:[2,152],114:[2,152],116:[2,152],119:[2,152],122:[2,152],123:[2,152]},{1:[2,125],15:[2,125],22:[2,125],34:[2,125],37:[2,125],42:[2,125],48:[2,125],50:[2,125],53:[2,125],69:[2,125],70:[2,125],73:[2,125],74:[2,125],77:[2,125],84:283,85:[1,284],86:[2,125],101:[2,125]},{1:[2,206],15:[2,206],17:[2,206],22:[2,206],34:[2,206],37:[2,206],42:[2,206],48:[2,206],50:[2,206],51:[2,206],53:[2,206],57:[2,206],61:[2,206],63:[2,206],66:[2,206],67:[2,206],69:[2,206],70:[2,206],73:[2,206],74:[2,206],77:[2,206],80:[2,206],81:[2,206],82:[2,206],83:[2,206],86:[2,206],87:[2,206],88:[2,206],89:[2,206],90:[2,206],91:[2,206],92:[2,206],93:[2,206],94:[2,206],95:[2,206],96:[2,206],97:[2,206],98:[2,206],99:[2,206],100:[2,206],101:[2,206],102:[2,206],111:[2,206],114:[2,206],116:[2,206],119:[2,206],122:[2,206],123:[2,206]},{126:[1,138],133:285,134:137},{15:[1,59],20:[1,61],38:286,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,176],15:[2,176],17:[2,176],22:[2,176],34:[2,176],37:[2,176],42:[2,176],48:[2,176],50:[2,176],51:[2,176],53:[2,176],57:[2,176],61:[2,176],63:[2,176],66:[2,176],67:[2,176],69:[2,176],70:[2,176],73:[2,176],74:[2,176],77:[2,176],80:[2,176],81:[2,176],82:[2,176],83:[2,176],86:[2,176],87:[2,176],88:[2,176],89:[2,176],90:[2,176],91:[2,176],92:[2,176],93:[2,176],94:[2,176],95:[2,176],96:[2,176],97:[2,176],98:[2,176],99:[2,176],100:[2,176],101:[2,176],102:[2,176],111:[2,176],114:[2,176],116:[2,176],119:[2,176],122:[2,176],123:[2,176]},{22:[1,287]},{15:[1,59],20:[1,61],38:224,51:[1,225],52:226,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],121:288,124:222,125:223,126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],38:224,51:[1,225],52:226,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],121:289,124:222,125:223,126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{22:[2,190],48:[1,290]},{22:[2,192],48:[2,192]},{22:[2,193],48:[2,193]},{22:[2,194],48:[2,194]},{17:[1,291],22:[2,119],48:[2,119],51:[1,118],80:[1,113],81:[1,122],82:[1,114],83:[1,115],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{1:[2,161],15:[2,161],17:[2,161],22:[2,161],34:[2,161],37:[2,161],42:[2,161],48:[2,161],50:[2,161],51:[2,161],53:[2,161],57:[2,161],61:[2,161],63:[2,161],66:[2,161],67:[2,161],69:[2,161],70:[2,161],73:[2,161],74:[2,161],77:[2,161],80:[2,161],81:[2,161],82:[2,161],83:[2,161],86:[2,161],87:[2,161],88:[2,161],89:[2,161],90:[2,161],91:[2,161],92:[2,161],93:[2,161],94:[2,161],95:[2,161],96:[2,161],97:[2,161],98:[2,161],99:[2,161],100:[2,161],101:[2,161],102:[2,161],111:[2,161],114:[2,161],116:[2,161],119:[2,161],122:[2,161],123:[2,161]},{113:292,114:[2,182],123:[1,293]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],122:[1,294]},{15:[1,59],20:[1,61],52:229,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],112:295,115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{99:[1,189]},{15:[1,59],20:[1,61],52:296,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:297,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:298,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:299,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,300]},{15:[1,59],20:[1,61],52:301,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,302]},{15:[1,59],20:[1,61],52:303,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,211],15:[2,211],17:[2,211],22:[2,211],34:[2,211],37:[2,211],42:[2,211],48:[2,211],50:[2,211],51:[2,211],53:[2,211],57:[2,211],61:[2,211],63:[2,211],66:[2,211],67:[2,211],69:[2,211],70:[2,211],73:[2,211],74:[2,211],77:[2,211],80:[2,211],81:[2,211],82:[2,211],83:[2,211],86:[2,211],87:[2,211],88:[2,211],89:[2,211],90:[2,211],91:[2,211],92:[2,211],93:[2,211],94:[2,211],95:[2,211],96:[2,211],97:[2,211],98:[2,211],99:[2,211],100:[2,211],101:[2,211],102:[2,211],111:[2,211],114:[2,211],116:[2,211],119:[2,211],122:[2,211],123:[2,211]},{15:[1,59],20:[1,61],21:304,38:154,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,36],34:[2,36],53:[2,36],69:[2,36],70:[2,36],77:[2,36],86:[2,36]},{1:[2,39],34:[2,39],48:[2,39],53:[2,39],69:[2,39],70:[2,39],77:[2,39],86:[2,39]},{1:[2,42],34:[2,42],48:[2,42],53:[2,42],69:[2,42],70:[2,42],77:[2,42],86:[2,42]},{34:[2,47],42:[2,47],69:[2,47]},{15:[1,305]},{1:[2,52],34:[2,52],42:[2,52],56:306,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,52],70:[2,52],77:[2,52],86:[2,52]},{1:[2,53],34:[2,53],42:[2,53],69:[2,53],70:[2,53],77:[2,53],86:[2,53]},{1:[2,56],15:[1,308],17:[1,96],34:[2,56],42:[2,56],50:[1,307],56:309,57:[1,86],59:87,60:310,61:[1,88],63:[1,89],64:[1,97],65:[1,98],66:[1,90],67:[1,91],69:[2,56],70:[2,56],77:[2,56],86:[2,56],100:[1,95]},{15:[1,312],17:[1,96],50:[1,313],62:311,64:[1,255],65:[1,256],100:[1,95]},{15:[1,315],17:[1,96],50:[1,316],62:314,64:[1,255],65:[1,256],100:[1,95]},{1:[2,68],34:[2,68],42:[2,68],56:317,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,68],70:[2,68],77:[2,68],86:[2,68]},{15:[1,318]},{62:319,64:[1,255],65:[1,256]},{15:[1,59],20:[1,61],52:320,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:321,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,80],34:[2,80],42:[2,80],56:322,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,80],70:[2,80],77:[2,80],86:[2,80]},{15:[1,323]},{62:324,64:[1,255],65:[1,256]},{1:[2,101],34:[2,101],42:[2,101],57:[2,101],61:[2,101],63:[2,101],66:[2,101],67:[2,101],69:[2,101],70:[2,101],77:[2,101],86:[2,101]},{1:[2,185],15:[2,185],17:[2,185],34:[2,185],42:[2,185],50:[2,185],57:[2,185],61:[2,185],63:[2,185],64:[2,185],65:[2,185],66:[2,185],67:[2,185],69:[2,185],70:[2,185],77:[2,185],86:[2,185],100:[2,185]},{78:[1,325],101:[1,326]},{101:[1,327]},{17:[1,328]},{1:[2,110],77:[2,110],86:[2,110]},{15:[1,331],19:329,23:[1,330]},{17:[1,332]},{15:[1,59],20:[1,61],21:333,38:154,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{17:[1,334]},{1:[2,45],34:[2,45],69:[2,45],70:[2,45],77:[2,45],86:[2,45]},{1:[2,25],42:[2,25],70:[2,25],77:[2,25],86:[2,25]},{15:[1,59],20:[1,61],38:335,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:336,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{17:[1,131],51:[1,118],81:[1,337],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{1:[2,123],15:[2,123],22:[2,123],34:[2,123],37:[2,123],42:[2,123],48:[2,123],50:[2,123],53:[2,123],69:[2,123],70:[2,123],73:[2,123],74:[2,123],77:[2,123],86:[2,123],101:[2,123]},{1:[2,142],15:[2,142],17:[1,131],22:[2,142],34:[2,142],37:[2,142],42:[2,142],48:[2,142],50:[2,142],51:[2,142],53:[2,142],57:[2,142],61:[2,142],63:[2,142],66:[2,142],67:[2,142],69:[2,142],70:[2,142],73:[2,142],74:[2,142],77:[2,142],80:[2,142],81:[2,142],82:[1,231],83:[2,142],86:[2,142],87:[2,142],88:[2,142],89:[2,142],90:[2,142],91:[2,142],92:[2,142],93:[2,142],94:[2,142],95:[2,142],96:[2,142],97:[2,142],98:[2,142],99:[2,142],100:[1,132],101:[2,142],102:[2,142],111:[2,142],114:[2,142],116:[2,142],119:[2,142],122:[2,142],123:[2,142]},{1:[2,144],15:[2,144],17:[2,144],22:[2,144],34:[2,144],37:[2,144],42:[2,144],48:[2,144],50:[2,144],51:[2,144],53:[2,144],57:[2,144],61:[2,144],63:[2,144],66:[2,144],67:[2,144],69:[2,144],70:[2,144],73:[2,144],74:[2,144],77:[2,144],80:[2,144],81:[2,144],82:[2,144],83:[2,144],86:[2,144],87:[2,144],88:[2,144],89:[2,144],90:[2,144],91:[2,144],92:[2,144],93:[2,144],94:[2,144],95:[2,144],96:[2,144],97:[2,144],98:[2,144],99:[2,144],100:[2,144],101:[2,144],102:[2,144],111:[2,144],114:[2,144],116:[2,144],119:[2,144],122:[2,144],123:[2,144]},{78:[1,338],101:[1,339]},{101:[1,340]},{1:[2,149],15:[2,149],17:[2,149],22:[2,149],34:[2,149],37:[2,149],42:[2,149],48:[2,149],50:[2,149],51:[2,149],53:[2,149],57:[2,149],61:[2,149],63:[2,149],66:[2,149],67:[2,149],69:[2,149],70:[2,149],73:[2,149],74:[2,149],77:[2,149],80:[2,149],81:[2,149],82:[2,149],83:[2,149],86:[2,149],87:[2,149],88:[2,149],89:[2,149],90:[2,149],91:[2,149],92:[2,149],93:[2,149],94:[2,149],95:[2,149],96:[2,149],97:[2,149],98:[2,149],99:[2,149],100:[2,149],101:[2,149],102:[2,149],111:[2,149],114:[2,149],116:[2,149],119:[2,149],122:[2,149],123:[2,149]},{1:[2,151],15:[2,151],17:[2,151],22:[2,151],34:[2,151],37:[2,151],42:[2,151],48:[2,151],50:[2,151],51:[2,151],53:[2,151],57:[2,151],61:[2,151],63:[2,151],66:[2,151],67:[2,151],69:[2,151],70:[2,151],73:[2,151],74:[2,151],77:[2,151],80:[2,151],81:[2,151],82:[2,151],83:[2,151],86:[2,151],87:[2,151],88:[2,151],89:[2,151],90:[2,151],91:[2,151],92:[2,151],93:[2,151],94:[2,151],95:[2,151],96:[2,151],97:[2,151],98:[2,151],99:[2,151],100:[2,151],101:[2,151],102:[2,151],111:[2,151],114:[2,151],116:[2,151],119:[2,151],122:[2,151],123:[2,151]},{1:[2,153],15:[2,153],17:[2,153],22:[2,153],34:[2,153],37:[2,153],42:[2,153],48:[2,153],50:[2,153],51:[2,153],53:[2,153],57:[2,153],61:[2,153],63:[2,153],66:[2,153],67:[2,153],69:[2,153],70:[2,153],73:[2,153],74:[2,153],77:[2,153],80:[2,153],81:[2,153],82:[2,153],83:[2,153],86:[2,153],87:[2,153],88:[2,153],89:[2,153],90:[2,153],91:[2,153],92:[2,153],93:[2,153],94:[2,153],95:[2,153],96:[2,153],97:[2,153],98:[2,153],99:[2,153],100:[2,153],101:[2,153],102:[2,153],111:[2,153],114:[2,153],116:[2,153],119:[2,153],122:[2,153],123:[2,153]},{1:[2,126],15:[2,126],22:[2,126],34:[2,126],37:[2,126],42:[2,126],48:[2,126],50:[2,126],53:[2,126],69:[2,126],70:[2,126],73:[2,126],74:[2,126],77:[2,126],86:[2,126],101:[2,126]},{6:134,25:7,26:11,29:13,33:14,39:15,42:[1,17],53:[1,16]},{86:[2,208]},{48:[2,209],86:[2,209]},{1:[2,177],15:[2,177],17:[2,177],22:[2,177],34:[2,177],37:[2,177],42:[2,177],48:[2,177],50:[2,177],51:[2,177],53:[2,177],57:[2,177],61:[2,177],63:[2,177],66:[2,177],67:[2,177],69:[2,177],70:[2,177],73:[2,177],74:[2,177],77:[2,177],80:[2,177],81:[2,177],82:[2,177],83:[2,177],86:[2,177],87:[2,177],88:[2,177],89:[2,177],90:[2,177],91:[2,177],92:[2,177],93:[2,177],94:[2,177],95:[2,177],96:[2,177],97:[2,177],98:[2,177],99:[2,177],100:[2,177],101:[2,177],102:[2,177],111:[2,177],114:[2,177],116:[2,177],119:[2,177],122:[2,177],123:[2,177]},{22:[1,341]},{22:[1,342]},{15:[1,59],20:[1,61],38:224,51:[1,225],52:226,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],121:343,124:222,125:223,126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,206],51:[1,344]},{114:[1,345]},{15:[1,59],20:[1,61],52:346,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:347,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{113:348,114:[2,182],123:[1,293]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,349]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],116:[1,350]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],116:[1,351]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,352]},{83:[1,353]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],111:[1,354],114:[1,355]},{83:[1,356]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],111:[1,357],114:[1,358]},{1:[2,213],22:[2,213],37:[2,213],42:[2,213],70:[2,213],77:[2,213],86:[2,213],101:[2,213]},{1:[2,51],34:[2,51],42:[2,51],56:359,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,51],70:[2,51],77:[2,51],86:[2,51]},{1:[2,55],34:[2,55],42:[2,55],69:[2,55],70:[2,55],77:[2,55],86:[2,55]},{15:[1,360]},{1:[2,58],34:[2,58],42:[2,58],56:361,57:[1,86],59:87,60:362,61:[1,88],63:[1,89],64:[1,97],65:[1,98],66:[1,90],67:[1,91],69:[2,58],70:[2,58],77:[2,58],86:[2,58]},{1:[2,59],34:[2,59],42:[2,59],69:[2,59],70:[2,59],77:[2,59],86:[2,59]},{1:[2,62],34:[2,62],42:[2,62],56:363,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,62],70:[2,62],77:[2,62],86:[2,62]},{1:[2,74],34:[2,74],42:[2,74],56:364,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,74],70:[2,74],77:[2,74],86:[2,74]},{62:365,64:[1,255],65:[1,256]},{15:[1,366]},{1:[2,86],34:[2,86],42:[2,86],56:367,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,86],70:[2,86],77:[2,86],86:[2,86]},{62:368,64:[1,255],65:[1,256]},{15:[1,369]},{1:[2,71],34:[2,71],42:[2,71],69:[2,71],70:[2,71],77:[2,71],86:[2,71]},{62:370,64:[1,255],65:[1,256]},{1:[2,70],34:[2,70],42:[2,70],56:371,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,70],70:[2,70],77:[2,70],86:[2,70]},{1:[2,92],17:[1,131],34:[2,92],42:[2,92],51:[1,118],57:[2,92],61:[2,92],63:[2,92],66:[2,92],67:[2,92],69:[2,92],70:[2,92],77:[2,92],81:[1,122],82:[1,231],86:[2,92],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{1:[2,93],17:[1,131],34:[2,93],42:[2,93],51:[1,118],57:[2,93],61:[2,93],63:[2,93],66:[2,93],67:[2,93],69:[2,93],70:[2,93],77:[2,93],81:[1,122],82:[1,231],86:[2,93],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133]},{1:[2,83],34:[2,83],42:[2,83],69:[2,83],70:[2,83],77:[2,83],86:[2,83]},{62:372,64:[1,255],65:[1,256]},{1:[2,82],34:[2,82],42:[2,82],56:373,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,82],70:[2,82],77:[2,82],86:[2,82]},{101:[1,374]},{1:[2,187],15:[2,187],17:[2,187],34:[2,187],42:[2,187],50:[2,187],57:[2,187],61:[2,187],63:[2,187],64:[2,187],65:[2,187],66:[2,187],67:[2,187],69:[2,187],70:[2,187],77:[2,187],86:[2,187],100:[2,187]},{1:[2,188],15:[2,188],17:[2,188],34:[2,188],42:[2,188],50:[2,188],57:[2,188],61:[2,188],63:[2,188],64:[2,188],65:[2,188],66:[2,188],67:[2,188],69:[2,188],70:[2,188],77:[2,188],86:[2,188],100:[2,188]},{15:[1,375]},{1:[2,10]},{1:[2,16]},{1:[2,17]},{15:[1,376]},{22:[1,377]},{15:[1,378]},{1:[2,27],42:[2,27],70:[2,27],77:[2,27],86:[2,27]},{1:[2,120],15:[2,120],17:[1,131],22:[2,120],34:[2,120],37:[2,120],42:[2,120],48:[2,120],50:[2,120],51:[1,118],53:[2,120],69:[2,120],70:[2,120],73:[2,120],74:[2,120],77:[2,120],81:[2,133],82:[1,231],86:[2,120],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,133],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],101:[2,120],102:[1,133]},{15:[1,59],20:[1,61],52:379,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{101:[1,380]},{1:[2,146],15:[2,146],17:[2,146],22:[2,146],34:[2,146],37:[2,146],42:[2,146],48:[2,146],50:[2,146],51:[2,146],53:[2,146],57:[2,146],61:[2,146],63:[2,146],66:[2,146],67:[2,146],69:[2,146],70:[2,146],73:[2,146],74:[2,146],77:[2,146],80:[2,146],81:[2,146],82:[2,146],83:[2,146],86:[2,146],87:[2,146],88:[2,146],89:[2,146],90:[2,146],91:[2,146],92:[2,146],93:[2,146],94:[2,146],95:[2,146],96:[2,146],97:[2,146],98:[2,146],99:[2,146],100:[2,146],101:[2,146],102:[2,146],111:[2,146],114:[2,146],116:[2,146],119:[2,146],122:[2,146],123:[2,146]},{1:[2,147],15:[2,147],17:[2,147],22:[2,147],34:[2,147],37:[2,147],42:[2,147],48:[2,147],50:[2,147],51:[2,147],53:[2,147],57:[2,147],61:[2,147],63:[2,147],66:[2,147],67:[2,147],69:[2,147],70:[2,147],73:[2,147],74:[2,147],77:[2,147],80:[2,147],81:[2,147],82:[2,147],83:[2,147],86:[2,147],87:[2,147],88:[2,147],89:[2,147],90:[2,147],91:[2,147],92:[2,147],93:[2,147],94:[2,147],95:[2,147],96:[2,147],97:[2,147],98:[2,147],99:[2,147],100:[2,147],101:[2,147],102:[2,147],111:[2,147],114:[2,147],116:[2,147],119:[2,147],122:[2,147],123:[2,147]},{1:[2,178],15:[2,178],17:[2,178],22:[2,178],34:[2,178],37:[2,178],42:[2,178],48:[2,178],50:[2,178],51:[2,178],53:[2,178],57:[2,178],61:[2,178],63:[2,178],66:[2,178],67:[2,178],69:[2,178],70:[2,178],73:[2,178],74:[2,178],77:[2,178],80:[2,178],81:[2,178],82:[2,178],83:[2,178],86:[2,178],87:[2,178],88:[2,178],89:[2,178],90:[2,178],91:[2,178],92:[2,178],93:[2,178],94:[2,178],95:[2,178],96:[2,178],97:[2,178],98:[2,178],99:[2,178],100:[2,178],101:[2,178],102:[2,178],111:[2,178],114:[2,178],116:[2,178],119:[2,178],122:[2,178],123:[2,178]},{1:[2,179],15:[2,179],17:[2,179],22:[2,179],34:[2,179],37:[2,179],42:[2,179],48:[2,179],50:[2,179],51:[2,179],53:[2,179],57:[2,179],61:[2,179],63:[2,179],66:[2,179],67:[2,179],69:[2,179],70:[2,179],73:[2,179],74:[2,179],77:[2,179],80:[2,179],81:[2,179],82:[2,179],83:[2,179],86:[2,179],87:[2,179],88:[2,179],89:[2,179],90:[2,179],91:[2,179],92:[2,179],93:[2,179],94:[2,179],95:[2,179],96:[2,179],97:[2,179],98:[2,179],99:[2,179],100:[2,179],101:[2,179],102:[2,179],111:[2,179],114:[2,179],116:[2,179],119:[2,179],122:[2,179],123:[2,179]},{22:[2,191]},{22:[2,195],48:[2,195]},{1:[2,162],15:[2,162],17:[2,162],22:[2,162],34:[2,162],37:[2,162],42:[2,162],48:[2,162],50:[2,162],51:[2,162],53:[2,162],57:[2,162],61:[2,162],63:[2,162],66:[2,162],67:[2,162],69:[2,162],70:[2,162],73:[2,162],74:[2,162],77:[2,162],80:[2,162],81:[2,162],82:[2,162],83:[2,162],86:[2,162],87:[2,162],88:[2,162],89:[2,162],90:[2,162],91:[2,162],92:[2,162],93:[2,162],94:[2,162],95:[2,162],96:[2,162],97:[2,162],98:[2,162],99:[2,162],100:[2,162],101:[2,162],102:[2,162],111:[2,162],114:[2,162],116:[2,162],119:[2,162],122:[2,162],123:[2,162]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[2,183]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],111:[1,381],114:[2,180],123:[2,180]},{114:[1,382]},{1:[2,164],15:[2,164],17:[2,164],22:[2,164],34:[2,164],37:[2,164],42:[2,164],48:[2,164],50:[2,164],51:[2,164],53:[2,164],57:[2,164],61:[2,164],63:[2,164],66:[2,164],67:[2,164],69:[2,164],70:[2,164],73:[2,164],74:[2,164],77:[2,164],80:[2,164],81:[2,164],82:[2,164],83:[2,164],86:[2,164],87:[2,164],88:[2,164],89:[2,164],90:[2,164],91:[2,164],92:[2,164],93:[2,164],94:[2,164],95:[2,164],96:[2,164],97:[2,164],98:[2,164],99:[2,164],100:[2,164],101:[2,164],102:[2,164],111:[2,164],114:[2,164],116:[2,164],119:[2,164],122:[2,164],123:[2,164]},{15:[1,59],20:[1,61],52:383,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:384,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,167],15:[2,167],17:[2,167],22:[2,167],34:[2,167],37:[2,167],42:[2,167],48:[2,167],50:[2,167],51:[2,167],53:[2,167],57:[2,167],61:[2,167],63:[2,167],66:[2,167],67:[2,167],69:[2,167],70:[2,167],73:[2,167],74:[2,167],77:[2,167],80:[2,167],81:[2,167],82:[2,167],83:[2,167],86:[2,167],87:[2,167],88:[2,167],89:[2,167],90:[2,167],91:[2,167],92:[2,167],93:[2,167],94:[2,167],95:[2,167],96:[2,167],97:[2,167],98:[2,167],99:[2,167],100:[2,167],101:[2,167],102:[2,167],111:[2,167],114:[2,167],116:[2,167],119:[2,167],122:[2,167],123:[2,167]},{15:[1,59],20:[1,61],52:385,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:386,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,171],15:[2,171],17:[2,171],22:[2,171],34:[2,171],37:[2,171],42:[2,171],48:[2,171],50:[2,171],51:[2,171],53:[2,171],57:[2,171],61:[2,171],63:[2,171],66:[2,171],67:[2,171],69:[2,171],70:[2,171],73:[2,171],74:[2,171],77:[2,171],80:[2,171],81:[2,171],82:[2,171],83:[2,171],86:[2,171],87:[2,171],88:[2,171],89:[2,171],90:[2,171],91:[2,171],92:[2,171],93:[2,171],94:[2,171],95:[2,171],96:[2,171],97:[2,171],98:[2,171],99:[2,171],100:[2,171],101:[2,171],102:[2,171],111:[2,171],114:[2,171],116:[2,171],119:[2,171],122:[2,171],123:[2,171]},{15:[1,59],20:[1,61],52:387,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{15:[1,59],20:[1,61],52:388,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,175],15:[2,175],17:[2,175],22:[2,175],34:[2,175],37:[2,175],42:[2,175],48:[2,175],50:[2,175],51:[2,175],53:[2,175],57:[2,175],61:[2,175],63:[2,175],66:[2,175],67:[2,175],69:[2,175],70:[2,175],73:[2,175],74:[2,175],77:[2,175],80:[2,175],81:[2,175],82:[2,175],83:[2,175],86:[2,175],87:[2,175],88:[2,175],89:[2,175],90:[2,175],91:[2,175],92:[2,175],93:[2,175],94:[2,175],95:[2,175],96:[2,175],97:[2,175],98:[2,175],99:[2,175],100:[2,175],101:[2,175],102:[2,175],111:[2,175],114:[2,175],116:[2,175],119:[2,175],122:[2,175],123:[2,175]},{1:[2,54],34:[2,54],42:[2,54],69:[2,54],70:[2,54],77:[2,54],86:[2,54]},{1:[2,57],34:[2,57],42:[2,57],56:389,57:[1,86],59:87,60:390,61:[1,88],63:[1,89],64:[1,97],65:[1,98],66:[1,90],67:[1,91],69:[2,57],70:[2,57],77:[2,57],86:[2,57]},{1:[2,61],34:[2,61],42:[2,61],69:[2,61],70:[2,61],77:[2,61],86:[2,61]},{1:[2,63],34:[2,63],42:[2,63],56:391,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,63],70:[2,63],77:[2,63],86:[2,63]},{1:[2,65],34:[2,65],42:[2,65],69:[2,65],70:[2,65],77:[2,65],86:[2,65]},{1:[2,75],34:[2,75],42:[2,75],69:[2,75],70:[2,75],77:[2,75],86:[2,75]},{1:[2,76],34:[2,76],42:[2,76],56:392,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,76],70:[2,76],77:[2,76],86:[2,76]},{62:393,64:[1,255],65:[1,256]},{1:[2,87],34:[2,87],42:[2,87],69:[2,87],70:[2,87],77:[2,87],86:[2,87]},{1:[2,88],34:[2,88],42:[2,88],56:394,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,88],70:[2,88],77:[2,88],86:[2,88]},{62:395,64:[1,255],65:[1,256]},{1:[2,69],34:[2,69],42:[2,69],56:396,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,69],70:[2,69],77:[2,69],86:[2,69]},{1:[2,73],34:[2,73],42:[2,73],69:[2,73],70:[2,73],77:[2,73],86:[2,73]},{1:[2,81],34:[2,81],42:[2,81],56:397,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,81],70:[2,81],77:[2,81],86:[2,81]},{1:[2,85],34:[2,85],42:[2,85],69:[2,85],70:[2,85],77:[2,85],86:[2,85]},{1:[2,186],15:[2,186],17:[2,186],34:[2,186],42:[2,186],50:[2,186],57:[2,186],61:[2,186],63:[2,186],64:[2,186],65:[2,186],66:[2,186],67:[2,186],69:[2,186],70:[2,186],77:[2,186],86:[2,186],100:[2,186]},{1:[2,19]},{1:[2,9],18:[1,398]},{1:[2,12],18:[1,399]},{20:[1,400]},{1:[2,121],15:[2,121],17:[1,131],22:[2,121],34:[2,121],37:[2,121],42:[2,121],48:[2,121],50:[2,121],51:[1,118],53:[2,121],69:[2,121],70:[2,121],73:[2,121],74:[2,121],77:[2,121],81:[2,133],82:[1,231],86:[2,121],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[2,133],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],101:[2,121],102:[1,133]},{1:[2,145],15:[2,145],17:[2,145],22:[2,145],34:[2,145],37:[2,145],42:[2,145],48:[2,145],50:[2,145],51:[2,145],53:[2,145],57:[2,145],61:[2,145],63:[2,145],66:[2,145],67:[2,145],69:[2,145],70:[2,145],73:[2,145],74:[2,145],77:[2,145],80:[2,145],81:[2,145],82:[2,145],83:[2,145],86:[2,145],87:[2,145],88:[2,145],89:[2,145],90:[2,145],91:[2,145],92:[2,145],93:[2,145],94:[2,145],95:[2,145],96:[2,145],97:[2,145],98:[2,145],99:[2,145],100:[2,145],101:[2,145],102:[2,145],111:[2,145],114:[2,145],116:[2,145],119:[2,145],122:[2,145],123:[2,145]},{15:[1,59],20:[1,61],52:229,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],112:401,115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,163],15:[2,163],17:[2,163],22:[2,163],34:[2,163],37:[2,163],42:[2,163],48:[2,163],50:[2,163],51:[2,163],53:[2,163],57:[2,163],61:[2,163],63:[2,163],66:[2,163],67:[2,163],69:[2,163],70:[2,163],73:[2,163],74:[2,163],77:[2,163],80:[2,163],81:[2,163],82:[2,163],83:[2,163],86:[2,163],87:[2,163],88:[2,163],89:[2,163],90:[2,163],91:[2,163],92:[2,163],93:[2,163],94:[2,163],95:[2,163],96:[2,163],97:[2,163],98:[2,163],99:[2,163],100:[2,163],101:[2,163],102:[2,163],111:[2,163],114:[2,163],116:[2,163],119:[2,163],122:[2,163],123:[2,163]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,402]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,403]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],111:[1,404],114:[1,405]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,406]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],111:[1,407],114:[1,408]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,409]},{1:[2,60],34:[2,60],42:[2,60],69:[2,60],70:[2,60],77:[2,60],86:[2,60]},{1:[2,64],34:[2,64],42:[2,64],56:410,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,64],70:[2,64],77:[2,64],86:[2,64]},{1:[2,66],34:[2,66],42:[2,66],69:[2,66],70:[2,66],77:[2,66],86:[2,66]},{1:[2,77],34:[2,77],42:[2,77],69:[2,77],70:[2,77],77:[2,77],86:[2,77]},{1:[2,78],34:[2,78],42:[2,78],56:411,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,78],70:[2,78],77:[2,78],86:[2,78]},{1:[2,89],34:[2,89],42:[2,89],69:[2,89],70:[2,89],77:[2,89],86:[2,89]},{1:[2,90],34:[2,90],42:[2,90],56:412,57:[1,86],59:87,61:[1,88],63:[1,89],66:[1,90],67:[1,91],69:[2,90],70:[2,90],77:[2,90],86:[2,90]},{1:[2,72],34:[2,72],42:[2,72],69:[2,72],70:[2,72],77:[2,72],86:[2,72]},{1:[2,84],34:[2,84],42:[2,84],69:[2,84],70:[2,84],77:[2,84],86:[2,84]},{15:[1,331],19:413,23:[1,330]},{15:[1,331],19:414,23:[1,330]},{15:[1,59],20:[1,61],21:415,38:154,52:51,78:[1,74],82:[1,55],84:52,85:[1,54],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{114:[2,181],123:[2,181]},{1:[2,165],15:[2,165],17:[2,165],22:[2,165],34:[2,165],37:[2,165],42:[2,165],48:[2,165],50:[2,165],51:[2,165],53:[2,165],57:[2,165],61:[2,165],63:[2,165],66:[2,165],67:[2,165],69:[2,165],70:[2,165],73:[2,165],74:[2,165],77:[2,165],80:[2,165],81:[2,165],82:[2,165],83:[2,165],86:[2,165],87:[2,165],88:[2,165],89:[2,165],90:[2,165],91:[2,165],92:[2,165],93:[2,165],94:[2,165],95:[2,165],96:[2,165],97:[2,165],98:[2,165],99:[2,165],100:[2,165],101:[2,165],102:[2,165],111:[2,165],114:[2,165],116:[2,165],119:[2,165],122:[2,165],123:[2,165]},{1:[2,166],15:[2,166],17:[2,166],22:[2,166],34:[2,166],37:[2,166],42:[2,166],48:[2,166],50:[2,166],51:[2,166],53:[2,166],57:[2,166],61:[2,166],63:[2,166],66:[2,166],67:[2,166],69:[2,166],70:[2,166],73:[2,166],74:[2,166],77:[2,166],80:[2,166],81:[2,166],82:[2,166],83:[2,166],86:[2,166],87:[2,166],88:[2,166],89:[2,166],90:[2,166],91:[2,166],92:[2,166],93:[2,166],94:[2,166],95:[2,166],96:[2,166],97:[2,166],98:[2,166],99:[2,166],100:[2,166],101:[2,166],102:[2,166],111:[2,166],114:[2,166],116:[2,166],119:[2,166],122:[2,166],123:[2,166]},{15:[1,59],20:[1,61],52:416,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,170],15:[2,170],17:[2,170],22:[2,170],34:[2,170],37:[2,170],42:[2,170],48:[2,170],50:[2,170],51:[2,170],53:[2,170],57:[2,170],61:[2,170],63:[2,170],66:[2,170],67:[2,170],69:[2,170],70:[2,170],73:[2,170],74:[2,170],77:[2,170],80:[2,170],81:[2,170],82:[2,170],83:[2,170],86:[2,170],87:[2,170],88:[2,170],89:[2,170],90:[2,170],91:[2,170],92:[2,170],93:[2,170],94:[2,170],95:[2,170],96:[2,170],97:[2,170],98:[2,170],99:[2,170],100:[2,170],101:[2,170],102:[2,170],111:[2,170],114:[2,170],116:[2,170],119:[2,170],122:[2,170],123:[2,170]},{1:[2,169],15:[2,169],17:[2,169],22:[2,169],34:[2,169],37:[2,169],42:[2,169],48:[2,169],50:[2,169],51:[2,169],53:[2,169],57:[2,169],61:[2,169],63:[2,169],66:[2,169],67:[2,169],69:[2,169],70:[2,169],73:[2,169],74:[2,169],77:[2,169],80:[2,169],81:[2,169],82:[2,169],83:[2,169],86:[2,169],87:[2,169],88:[2,169],89:[2,169],90:[2,169],91:[2,169],92:[2,169],93:[2,169],94:[2,169],95:[2,169],96:[2,169],97:[2,169],98:[2,169],99:[2,169],100:[2,169],101:[2,169],102:[2,169],111:[2,169],114:[2,169],116:[2,169],119:[2,169],122:[2,169],123:[2,169]},{15:[1,59],20:[1,61],52:417,78:[1,74],82:[1,55],85:[1,140],88:[1,56],100:[1,76],103:[1,73],106:53,107:57,108:58,109:60,110:[1,62],115:[1,63],117:[1,64],118:[1,65],120:[1,66],126:[1,67],127:68,128:69,129:70,130:[1,71],131:[1,72],132:[1,75]},{1:[2,174],15:[2,174],17:[2,174],22:[2,174],34:[2,174],37:[2,174],42:[2,174],48:[2,174],50:[2,174],51:[2,174],53:[2,174],57:[2,174],61:[2,174],63:[2,174],66:[2,174],67:[2,174],69:[2,174],70:[2,174],73:[2,174],74:[2,174],77:[2,174],80:[2,174],81:[2,174],82:[2,174],83:[2,174],86:[2,174],87:[2,174],88:[2,174],89:[2,174],90:[2,174],91:[2,174],92:[2,174],93:[2,174],94:[2,174],95:[2,174],96:[2,174],97:[2,174],98:[2,174],99:[2,174],100:[2,174],101:[2,174],102:[2,174],111:[2,174],114:[2,174],116:[2,174],119:[2,174],122:[2,174],123:[2,174]},{1:[2,173],15:[2,173],17:[2,173],22:[2,173],34:[2,173],37:[2,173],42:[2,173],48:[2,173],50:[2,173],51:[2,173],53:[2,173],57:[2,173],61:[2,173],63:[2,173],66:[2,173],67:[2,173],69:[2,173],70:[2,173],73:[2,173],74:[2,173],77:[2,173],80:[2,173],81:[2,173],82:[2,173],83:[2,173],86:[2,173],87:[2,173],88:[2,173],89:[2,173],90:[2,173],91:[2,173],92:[2,173],93:[2,173],94:[2,173],95:[2,173],96:[2,173],97:[2,173],98:[2,173],99:[2,173],100:[2,173],101:[2,173],102:[2,173],111:[2,173],114:[2,173],116:[2,173],119:[2,173],122:[2,173],123:[2,173]},{1:[2,67],34:[2,67],42:[2,67],69:[2,67],70:[2,67],77:[2,67],86:[2,67]},{1:[2,79],34:[2,79],42:[2,79],69:[2,79],70:[2,79],77:[2,79],86:[2,79]},{1:[2,91],34:[2,91],42:[2,91],69:[2,91],70:[2,91],77:[2,91],86:[2,91]},{1:[2,11]},{1:[2,14]},{22:[1,418]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,419]},{17:[1,131],51:[1,118],81:[1,122],82:[1,231],87:[1,116],88:[1,117],89:[1,119],90:[1,120],91:[1,121],92:[1,123],93:[1,124],94:[1,125],95:[1,126],96:[1,127],97:[1,128],98:[1,129],99:[1,130],100:[1,132],102:[1,133],114:[1,420]},{1:[2,13],18:[1,421]},{1:[2,168],15:[2,168],17:[2,168],22:[2,168],34:[2,168],37:[2,168],42:[2,168],48:[2,168],50:[2,168],51:[2,168],53:[2,168],57:[2,168],61:[2,168],63:[2,168],66:[2,168],67:[2,168],69:[2,168],70:[2,168],73:[2,168],74:[2,168],77:[2,168],80:[2,168],81:[2,168],82:[2,168],83:[2,168],86:[2,168],87:[2,168],88:[2,168],89:[2,168],90:[2,168],91:[2,168],92:[2,168],93:[2,168],94:[2,168],95:[2,168],96:[2,168],97:[2,168],98:[2,168],99:[2,168],100:[2,168],101:[2,168],102:[2,168],111:[2,168],114:[2,168],116:[2,168],119:[2,168],122:[2,168],123:[2,168]},{1:[2,172],15:[2,172],17:[2,172],22:[2,172],34:[2,172],37:[2,172],42:[2,172],48:[2,172],50:[2,172],51:[2,172],53:[2,172],57:[2,172],61:[2,172],63:[2,172],66:[2,172],67:[2,172],69:[2,172],70:[2,172],73:[2,172],74:[2,172],77:[2,172],80:[2,172],81:[2,172],82:[2,172],83:[2,172],86:[2,172],87:[2,172],88:[2,172],89:[2,172],90:[2,172],91:[2,172],92:[2,172],93:[2,172],94:[2,172],95:[2,172],96:[2,172],97:[2,172],98:[2,172],99:[2,172],100:[2,172],101:[2,172],102:[2,172],111:[2,172],114:[2,172],116:[2,172],119:[2,172],122:[2,172],123:[2,172]},{15:[1,331],19:422,23:[1,330]},{1:[2,15]}],
defaultActions: {2:[2,1],4:[2,3],5:[2,4],6:[2,5],8:[2,6],9:[2,7],18:[2,2],174:[2,18],285:[2,208],329:[2,10],330:[2,16],331:[2,17],343:[2,191],375:[2,19],413:[2,11],414:[2,14],422:[2,15]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var ast = require('./ast');


/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
                    yy.logDebugTokens("STRING - %s", yy_.yytext);
                    return 126;
                  
break;
case 1:
                    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
                    yy.logDebugTokens("STRING - %s", yy_.yytext);
                    return 126;
                  
break;
case 2: yy.logDebugTokens("DOT"); return 17; 
break;
case 3: yy.logDebugTokens("PLUS"); return 87; 
break;
case 4: yy.logDebugTokens("MINUS"); return 88; 
break;
case 5: yy.logDebugTokens("MULT"); return 51; 
break;
case 6: yy.logDebugTokens("DIV"); return 89; 
break;
case 7: yy.logDebugTokens("MOD"); return 90; 
break;
case 8: yy.logDebugTokens("AND"); return 81; 
break;
case 9: yy.logDebugTokens("OR"); return 92; 
break;
case 10: yy.logDebugTokens("EQ"); return 93; 
break;
case 11: yy.logDebugTokens("EQ"); return 93; 
break;
case 12: yy.logDebugTokens("NE"); return 98; 
break;
case 13: yy.logDebugTokens("NE"); return 98; 
break;
case 14: yy.logDebugTokens("LT"); return 94; 
break;
case 15: yy.logDebugTokens("LTE"); return 95; 
break;
case 16: yy.logDebugTokens("GT"); return 96; 
break;
case 17: yy.logDebugTokens("GTE"); return 97; 
break;
case 18: yy.logDebugTokens("NOT"); return 82; 
break;
case 19: yy.logDebugTokens("LIKE"); return 99; 
break;
case 20: yy.logDebugTokens("IS"); return 102; 
break;
case 21: yy.logDebugTokens("MISSING"); return 104; 
break;
case 22: yy.logDebugTokens("VALUED"); return 105; 
break;
case 23: yy.logDebugTokens("SELECT"); return 42; 
break;
case 24: yy.logDebugTokens("AS"); return 50; 
break;
case 25: yy.logDebugTokens("IN"); return 83; 
break;
case 26: yy.logDebugTokens("FROM"); return 53; 
break;
case 27: yy.logDebugTokens("WHERE"); return 69; 
break;
case 28: yy.logDebugTokens("ORDER"); return 70; 
break;
case 29: yy.logDebugTokens("BY"); return 35; 
break;
case 30: yy.logDebugTokens("ASC"); return 73; 
break;
case 31: yy.logDebugTokens("DESC"); return 74; 
break;
case 32: yy.logDebugTokens("LIMIT"); return 77; 
break;
case 33: yy.logDebugTokens("OFFSET"); return 79; 
break;
case 34:
                    yy.logDebugTokens("EXPLAIN"); return 5;
                  
break;
case 35:
                    yy.logDebugTokens("DISTINCT"); return 44;
                  
break;
case 36:
                    yy.logDebugTokens("UNIQUE"); return 45;
                  
break;
case 37:
                    yy.logDebugTokens("CASE"); return 110;
                  
break;
case 38:
                    yy.logDebugTokens("WHEN"); return 111;
                  
break;
case 39:
                    yy.logDebugTokens("THEN"); return 122;
                  
break;
case 40:
                    yy.logDebugTokens("ELSE"); return 123;
                  
break;
case 41:
                    yy.logDebugTokens("END"); return 114;
                  
break;
case 42:
                    yy.logDebugTokens("ANY"); return 115;
                  
break;
case 43:
                    yy.logDebugTokens("FIRST"); return 118;
                  
break;
case 44:
                    yy.logDebugTokens("ALL"); return 43;
                  
break;
case 45:
                    yy.logDebugTokens("GROUP"); return 34;
                  
break;
case 46:
                    yy.logDebugTokens("BY"); return 35;
                  
break;
case 47:
                    yy.logDebugTokens("HAVING"); return 37;
                  
break;
case 48:
                    yy.logDebugTokens("CREATE"); return 11;
                  
break;
case 49:
                    yy.logDebugTokens("DROP"); return 24;
                  
break;
case 50:
                    yy.logDebugTokens("VIEW"); return 23;
                  
break;
case 51:
                    yy.logDebugTokens("USING"); return 18;
                  
break;
case 52:
                    yy.logDebugTokens("INDEX"); return 13;
                  
break;
case 53:
                    yy.logDebugTokens("ON"); return 14;
                  
break;
case 54:
                    yy.logDebugTokens("PRIMARY"); return 12;
                  
break;
case 55:
                    yy.logDebugTokens("ARRAY"); return 120;
                  
break;
case 56:
                    yy.logDebugTokens("ALTER"); return 'ALTER';
                  
break;
case 57:
                    yy.logDebugTokens("BETWEEN"); return 80;
                  
break;
case 58:
                    yy.logDebugTokens("BUCKET"); return 'BUCKET';
                  
break;
case 59:
                    yy.logDebugTokens("CAST"); return 'CAST';
                  
break;
case 60:
                    yy.logDebugTokens("COLLATE"); return 'COLLATE';
                  
break;
case 61:
                    yy.logDebugTokens("DATABASE"); return 'DATABASE';
                  
break;
case 62:
                    yy.logDebugTokens("DELETE"); return 'DELETE';
                  
break;
case 63:
                    yy.logDebugTokens("EACH"); return 'EACH';
                  
break;
case 64:
                    yy.logDebugTokens("EXCEPT"); return 'EXCEPT';
                  
break;
case 65:
                    yy.logDebugTokens("EXISTS"); return 'EXISTS';
                  
break;
case 66: yy.logDebugTokens("IF"); return 'IF'; 
break;
case 67:
                    yy.logDebugTokens("INLINE"); return 'INLINE';
                  
break;
case 68:
                    yy.logDebugTokens("INSERT"); return 'INSERT';
                  
break;
case 69:
                    yy.logDebugTokens("INTERSECT"); return 'INTERSECT';
                  
break;
case 70:
                    yy.logDebugTokens("INTO"); return 'INTO';
                  
break;
case 71:
                    yy.logDebugTokens("JOIN"); return 61;
                  
break;
case 72:
                    yy.logDebugTokens("PATH"); return 'PATH';
                  
break;
case 73:
                    yy.logDebugTokens("UNION"); return 'UNION';
                  
break;
case 74:
                    yy.logDebugTokens("UPDATE"); return 'UPDATE';
                  
break;
case 75:
                    yy.logDebugTokens("POOL"); return 'POOL';
                  
break;
case 76:
                    yy.logDebugTokens("SATISFIES"); return 116;
                  
break;
case 77:
                    yy.logDebugTokens("EVERY"); return 117;
                  
break;
case 78:
                    yy.logDebugTokens("UNNEST"); return 57;
                  
break;
case 79:
                    yy.logDebugTokens("FOR"); return 119;
                  
break;
case 80:
                    yy.logDebugTokens("KEY"); return 64;
                  
break;
case 81:
                    yy.logDebugTokens("KEYS"); return 65;
                  
break;
case 82:
                    yy.logDebugTokens("INNER"); return 66;
                  
break;
case 83:
                    yy.logDebugTokens("OUTER"); return 68;
                  
break;
case 84:
                    yy.logDebugTokens("LEFT"); return 67;
                  
break;
case 85:
                    yy.logDebugTokens("NEST"); return 63;
                  
break;
case 86: yy.logDebugTokens("CONCAT"); return 91; 
break;
case 87: yy.logDebugTokens("LPAREN"); return 20; 
break;
case 88: yy.logDebugTokens("RPAREN"); return 22; 
break;
case 89: yy.logDebugTokens("LBRACE"); return 85; 
break;
case 90: yy.logDebugTokens("RBRACE"); return 86; 
break;
case 91: yy.logDebugTokens("COMMA"); return 48; 
break;
case 92: yy.logDebugTokens("COLON"); return 16; 
break;
case 93: yy.logDebugTokens("LBRACKET"); return 100; 
break;
case 94: yy.logDebugTokens("RBRACKET"); return 101; 
break;
case 95: yy.logDebugTokens("TRUE"); return 130;
break;
case 96: yy.logDebugTokens("FALSE"); return 131;
break;
case 97: yy.logDebugTokens("NULL"); return 103;
break;
case 98:
                  // there are 2 separate rules for NUMBER
                  // instead of 1 with two optional components
                  // to differntiate it from plan INT
                    yy.logDebugTokens("NUMBER - %f", yy_.yytext);
                    yy_.yytext = parseDouble(yy_.yytext);
                    return 132;
                  
break;
case 99:
                    yy.logDebugTokens("NUMBER - %f", yy_.yytext);
                    yy_.yytext = parseDouble(yy_.yytext);
                    return 132;
                  
break;
case 100:
                    yy.logDebugTokens("INT - %d", yy_.yytext);
                    yy_.yytext = parseInt(yy_.yytext);
                    return 78;
                  
break;
case 101: yy.logDebugTokens("WHITESPACE (count=%d)", yy_.yytext.length); /* eat up whitespace */ 
break;
case 102:
                    yy.logDebugTokens("IDENTIFIER - %s", yy_.yytext);
                    return 15;
                  
break;
case 103:
                    //this rule allows for a wider range of identifiers by escaping them
                    yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
                    yy.logDebugTokens("IDENTIFIER - %s", yy_.yytext);
                    return 15;
                  
break;
}
},
rules: [/^(?:"((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^\"])*")/,/^(?:'((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^''])*')/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[aA][nN][dD])/,/^(?:[oO][rR])/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<>)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:[nN][oO][tT])/,/^(?:[lL][iI][kK][eE])/,/^(?:[iI][sS])/,/^(?:[mM][iI][sS][sS][iI][nN][gG])/,/^(?:[vV][aA][lL][uU][eE][dD])/,/^(?:[sS][eE][lL][eE][cC][tT])/,/^(?:[aA][sS])/,/^(?:[iI][nN])/,/^(?:[fF][rR][oO][mM])/,/^(?:[wW][hH][eE][rR][eE])/,/^(?:[oO][rR][dD][eE][rR])/,/^(?:[bB][yY])/,/^(?:[aA][sS][cC])/,/^(?:[dD][eE][sS][cC])/,/^(?:[lL][iI][mM][iI][tT])/,/^(?:[oO][fF][fF][sS][eE][tT])/,/^(?:[eE][xX][pP][lL][aA][iI][nN])/,/^(?:[dD][iI][sS][tT][iI][nN][cC][tT])/,/^(?:[uU][nN][iI][qQ][uU][eE])/,/^(?:[cC][aA][sS][eE])/,/^(?:[wW][hH][eE][nN])/,/^(?:[tT][hH][eE][nN])/,/^(?:[eE][lL][sS][eE])/,/^(?:[eE][nN][dD])/,/^(?:[aA][nN][yY])/,/^(?:[fF][iI][rR][sS][tT])/,/^(?:[aA][lL][lL])/,/^(?:[gG][rR][oO][uU][pP])/,/^(?:[bB][yY])/,/^(?:[hH][aA][vV][iI][nN][gG])/,/^(?:[cC][rR][eE][aA][tT][eE])/,/^(?:[dD][rR][oO][pP])/,/^(?:[vV][iI][eE][wW])/,/^(?:[uU][sS][iI][nN][gG])/,/^(?:[iI][nN][dD][eE][xX])/,/^(?:[oO][nN])/,/^(?:[pP][rR][iI][mM][aA][rR][yY])/,/^(?:[aA][rR][rR][aA][yY])/,/^(?:[aA][lL][tT][eE][rR])/,/^(?:[bB][eE][tT][wW][eE][eE][nN])/,/^(?:[bB][uU][cC][kK][eE][tT])/,/^(?:[cC][aA][sS][tT])/,/^(?:[cC][oO][lL][lL][aA][tT][eE])/,/^(?:[dD][aA][tT][aA][bB][aA][sS][eE])/,/^(?:[dD][eE][lL][eE][tT][eE])/,/^(?:[eE][aA][cC][hH])/,/^(?:[eE][xX][cC][eE][pP][tT])/,/^(?:[eE][xX][iI][sS][tT][sS])/,/^(?:[iI][fF])/,/^(?:[iI][nN][lL][iI][nN][eE])/,/^(?:[iI][nN][sS][eE][rR][tT])/,/^(?:[iI][nN][tT][eE][rR][sS][eE][cC][tT])/,/^(?:[iI][nN][tT][oO])/,/^(?:[jJ][oO][iI][nN])/,/^(?:[pP][aA][tT][hH])/,/^(?:[uU][nN][iI][oO][nN])/,/^(?:[uU][pP][dD][aA][tT][eE])/,/^(?:[pP][oO][oO][lL])/,/^(?:[sS][aA][tT][iI][sS][fF][iI][eE][sS])/,/^(?:[eE][vV][eE][rR][yY])/,/^(?:[uU][nN][nN][eE][sS][tT])/,/^(?:[fF][oO][rR])/,/^(?:[kK][eE][yY])/,/^(?:[kK][eE][yY][sS])/,/^(?:[iI][nN][nN][eE][rR])/,/^(?:[oO][uU][tT][eE][rR])/,/^(?:[lL][eE][fF][tT])/,/^(?:[nN][eE][sS][tT])/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?::)/,/^(?:\[)/,/^(?:\])/,/^(?:[tT][rR][uU][eE])/,/^(?:[fF][aA][lL][sS][eE])/,/^(?:[nN][uU][lL][lL])/,/^(?:([0-9]|[1-9][0-9]*)(\.[0-9][0-9]*)([eE][+\-]?[0-9][0-9]*)?)/,/^(?:([0-9]|[1-9][0-9]*)(\.[0-9][0-9]*)?([eE][+\-]?[0-9][0-9]*))/,/^(?:[0-9]|[1-9][0-9]*)/,/^(?:[ \t\n]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9\-_]*)/,/^(?:((\\")|(\\\\)|(\\\/)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])|[^`])+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = n1ql;
exports.Parser = n1ql.Parser;
exports.parse = function () { return n1ql.parse.apply(n1ql, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}